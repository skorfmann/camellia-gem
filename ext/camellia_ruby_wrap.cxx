/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.34
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    }
    *ptr = SWIG_TypeCast(tc, vptr);
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CamAffineTransform swig_types[0]
#define SWIGTYPE_p_CamBasin swig_types[1]
#define SWIGTYPE_p_CamBitmapFont swig_types[2]
#define SWIGTYPE_p_CamBlobInfo swig_types[3]
#define SWIGTYPE_p_CamBlobs swig_types[4]
#define SWIGTYPE_p_CamCapture swig_types[5]
#define SWIGTYPE_p_CamFPKdTreeNode swig_types[6]
#define SWIGTYPE_p_CamImage swig_types[7]
#define SWIGTYPE_p_CamKeypoint swig_types[8]
#define SWIGTYPE_p_CamKeypoints swig_types[9]
#define SWIGTYPE_p_CamKeypointsKdTree swig_types[10]
#define SWIGTYPE_p_CamKeypointsMatch swig_types[11]
#define SWIGTYPE_p_CamKeypointsMatches swig_types[12]
#define SWIGTYPE_p_CamLinearFilterKernel swig_types[13]
#define SWIGTYPE_p_CamMeasuresResults swig_types[14]
#define SWIGTYPE_p_CamMorphoMathsKernel swig_types[15]
#define SWIGTYPE_p_CamPoint swig_types[16]
#define SWIGTYPE_p_CamRLEImage swig_types[17]
#define SWIGTYPE_p_CamROI swig_types[18]
#define SWIGTYPE_p_CamRun swig_types[19]
#define SWIGTYPE_p_CamSepFilterKernel swig_types[20]
#define SWIGTYPE_p_CamTable swig_types[21]
#define SWIGTYPE_p_CamTableOfBasins swig_types[22]
#define SWIGTYPE_p_char swig_types[23]
#define SWIGTYPE_p_double swig_types[24]
#define SWIGTYPE_p_int swig_types[25]
#define SWIGTYPE_p_p_CamKeypoint swig_types[26]
#define SWIGTYPE_p_p_CamKeypoints swig_types[27]
#define SWIGTYPE_p_p_char swig_types[28]
#define SWIGTYPE_p_unsigned_char swig_types[29]
#define SWIGTYPE_p_void swig_types[30]
static swig_type_info *swig_types[32];
static swig_module_info swig_module = {swig_types, 31, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_camellia
#define SWIG_name    "Camellia"

static VALUE mCamellia;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x010334 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "../inc/camellia.h"
extern "C" void Init_camcapture();


#ifdef __cplusplus
extern "C" {
#endif
#include "rubyio.h"
#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/local/share/swig/1.3.34/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


/*@SWIG:/usr/local/share/swig/1.3.34/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (VALUE obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN CamKeypointsMatch *CamKeypointsMatches___getitem__(CamKeypointsMatches *self,int n){
        if (n >= 0 && n < self->nbMatches) return &(self->pairs[n]);
        else camError("CamKeypointsMatches","Index out of range");
        return NULL;
    }
SWIGINTERN void CamKeypointsMatches_each(CamKeypointsMatches *self){
        for (int i=0; i < self->nbMatches; i++) {
            VALUE obj = SWIG_NewPointerObj(&(self->pairs[i]), SWIGTYPE_p_CamKeypointsMatch, 0 );
            if (obj != Qnil) {
                rb_yield(obj);
            }
        }
    }
SWIGINTERN CamKeypoint *CamKeypoints___getitem__(CamKeypoints *self,int n){
        if (n >= 0 && n < self->nbPoints) return self->keypoint[n];
        else camError("CamKeypoints","Index out of range");
        return NULL;
    }
SWIGINTERN void CamKeypoints_each(CamKeypoints *self){
        for (int i=0; i < self->nbPoints; i++) {
            VALUE obj = SWIG_NewPointerObj(self->keypoint[i], SWIGTYPE_p_CamKeypoint, 0 );
            if (obj != Qnil) {
                rb_yield(obj);
            }
        }
    }
SWIGINTERN int CamTable___getitem__(CamTable *self,int n){
        if ((n>=0)&&(n<self->size)&&(n<CAM_TABLE_SIZE)) return self->t[n];
        else camError("CamTable","Index out of range");
        return self->t[0];
    }
SWIGINTERN void CamTable___setitem__(CamTable *self,int n,int val){
        if ((n>=0)&&(n<self->size)&&(n<CAM_TABLE_SIZE)) self->t[n]=val;
        else camError("CamTable","Index out of range");
    }
SWIGINTERN void CamTable_each(CamTable *self){
        for (int i=0;i<self->size;i++) {
            VALUE obj = INT2FIX(self->t[i]);
            if (obj != Qnil) {
                rb_yield(obj);
            }
        }
    }
SWIGINTERN CamBlobInfo CamBlobs___getitem__(CamBlobs *self,int n){
        if ((n>=0)&&(n<self->nbBlobs)) return self->blobInfo[n];
        else camError("CamBlobs","Index out of range");
        return self->blobInfo[0];
    }
SWIGINTERN void CamBlobs_each(CamBlobs *self){
        for (int i=0;i<self->nbBlobs;i++) {
            VALUE obj = SWIG_NewPointerObj((new CamBlobInfo(self->blobInfo[i])), SWIGTYPE_p_CamBlobInfo, SWIG_POINTER_OWN);
            if (obj != Qnil) {
                rb_yield(obj);
            }
        }
    }
SWIGINTERN CamBasin *CamTableOfBasins___getitem__(CamTableOfBasins *self,int n){
        if ((n >= 0) && (n < self->nbBasins)) return &self->tab[n];
        else camError("CamTableOfBasins","Index out of range");
        return &self->tab[0];
    }
SWIGINTERN void CamTableOfBasins_each(CamTableOfBasins *self){
        for (int i = 0;i < self->nbBasins; i++) {
            VALUE obj = SWIG_NewPointerObj(&self->tab[i], SWIGTYPE_p_CamBasin, 0 );
            if (obj != Qnil) {
                rb_yield(obj);
            }
        }
    }

static void mark_CamImage(void *ptr) {
    CamImage *image=(CamImage*)ptr;
    //printf("Marking CamImage %x\n", ptr); 
    if (image->roi) {
        VALUE object = SWIG_RubyInstanceFor(image->roi);
        if (object != Qnil) {
            rb_gc_mark(object);
        }
    }
    if (image->mask) {
        VALUE object = SWIG_RubyInstanceFor(image->mask);
        if (object != Qnil) {
            rb_gc_mark(object);
        }
    }
    if (image->imageData !=NULL && image->imageDataOrigin == NULL) {
        // Image references a Ruby string
        rb_gc_mark((VALUE)image->imageId);
    }
}

static void mark_CamKeypoints(void *ptr) {
    int i;
    //printf("Marking keypoints %x\n", ptr); 
    CamKeypoints *points = (CamKeypoints*)ptr;
    for (i = 0; i < points->nbPoints; i++) {
        VALUE object = SWIG_RubyInstanceFor(points->keypoint[i]);
        if (object != Qnil) {
            rb_gc_mark(object);
        }
    }
}

static void mark_CamKeypoint(void *ptr) {
    //printf("Marking keypoint %x\n", ptr); 
    CamKeypoint *point = (CamKeypoint*)ptr;
    if (point->set) {
        VALUE object = SWIG_RubyInstanceFor(point->set);
        if (object != Qnil) {
            rb_gc_mark(object);
        }
    }
}

static void mark_CamKeypointsMatch(void *ptr) {
    CamKeypointsMatch *match = (CamKeypointsMatch*)ptr;
    //printf("Marking match %x\n", ptr); 
    VALUE object = SWIG_RubyInstanceFor(match->p1);
    if (object != Qnil) {
        rb_gc_mark(object);
    }
    object = SWIG_RubyInstanceFor(match->p2);
    if (object != Qnil) {
        rb_gc_mark(object);
    }
}

static void mark_CamKeypointsMatches(void *ptr) {
    int i;
    CamKeypointsMatches *matches = (CamKeypointsMatches*)ptr;
    //printf("Marking matches %x\n", ptr); 
    for (i = 0; i < matches->nbMatches; i++) {
        VALUE object = SWIG_RubyInstanceFor(matches->pairs[i].p1);
        if (object != Qnil) {
            rb_gc_mark(object);
        }
        object = SWIG_RubyInstanceFor(matches->pairs[i].p2);
        if (object != Qnil) {
            rb_gc_mark(object);
        }
    }   
}



void camErrorRuby(char *module, char *error)
{
    rb_raise(rb_eRuntimeError,"Error in %s : %s",module,error);
}

static VALUE camellia_set_image_data(VALUE self, VALUE str)
{
    VALUE strx;
    CamImage *image;
    void *argp1 = 0 ;

    SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_CamImage, 0 |  0 );
    image = reinterpret_cast< CamImage * >(argp1);
    strx = StringValue(str);
    if (image->imageData) {
        camDeallocateImage(image);
    }
    image->imageId = (void*)strx; // Reference to the Ruby string kept for Mark & Sweep
    image->imageData = (unsigned char*)RSTRING(strx)->ptr;
    return self;
}

swig_class cCamROI;

SWIGINTERN VALUE
_wrap_CamROI_coi_set(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","coi", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","coi", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->coi = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_coi_get(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","coi", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  result = (int) ((arg1)->coi);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_xOffset_set(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","xOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","xOffset", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->xOffset = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_xOffset_get(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","xOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  result = (int) ((arg1)->xOffset);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_yOffset_set(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","yOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","yOffset", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->yOffset = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_yOffset_get(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","yOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  result = (int) ((arg1)->yOffset);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_width_set(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","width", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->width = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_width_get(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  result = (int) ((arg1)->width);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_height_set(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","height", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->height = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_height_get(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  result = (int) ((arg1)->height);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamROI__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamROI *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamROI *)new CamROI();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamROI__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  CamROI *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamROI", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CamROI", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CamROI", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","CamROI", 4, argv[3] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","CamROI", 5, argv[4] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (CamROI *)new CamROI(arg1,arg2,arg3,arg4,arg5);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamROI__SWIG_2(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = 0 ;
  int arg2 ;
  CamROI *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const &","CamROI", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","CamROI", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CamROI", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamROI *)new CamROI((CamImage const &)*arg1,arg2);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamROI_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamROI_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamROI);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamROI__SWIG_3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = 0 ;
  CamROI *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const &","CamROI", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","CamROI", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamROI *)new CamROI((CamImage const &)*arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CamROI(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs;
  if (argc > 5) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CamROI__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CamROI__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CamROI__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_CamROI__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "CamROI.new", 
    "    CamROI.new()\n"
    "    CamROI.new(int _coi, int _xOffset, int _yOffset, int _width, int _height)\n"
    "    CamROI.new(CamImage const &image, int _coi)\n"
    "    CamROI.new(CamImage const &image)\n");
  
  return Qnil;
}


SWIGINTERN void
free_CamROI(CamROI *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CamROI_intersect(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  CamROI *arg2 = 0 ;
  CamROI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI const *","intersect", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamROI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamROI const &","intersect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamROI const &","intersect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamROI * >(argp2);
  result = ((CamROI const *)arg1)->intersect((CamROI const &)*arg2);
  vresult = SWIG_NewPointerObj((new CamROI(static_cast< const CamROI& >(result))), SWIGTYPE_p_CamROI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_clip(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","clip", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","clip", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","clip", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)(arg1)->clip(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_reduce(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","reduce", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","reduce", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->reduce(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamROI_enlarge(int argc, VALUE *argv, VALUE self) {
  CamROI *arg1 = (CamROI *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamROI *","enlarge", 1, self )); 
  }
  arg1 = reinterpret_cast< CamROI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","enlarge", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->enlarge(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cCamPoint;

SWIGINTERN VALUE
_wrap_CamPoint_x_set(int argc, VALUE *argv, VALUE self) {
  CamPoint *arg1 = (CamPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamPoint *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< CamPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","x", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamPoint_x_get(int argc, VALUE *argv, VALUE self) {
  CamPoint *arg1 = (CamPoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamPoint *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< CamPoint * >(argp1);
  result = (int) ((arg1)->x);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamPoint_y_set(int argc, VALUE *argv, VALUE self) {
  CamPoint *arg1 = (CamPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamPoint *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","y", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamPoint_y_get(int argc, VALUE *argv, VALUE self) {
  CamPoint *arg1 = (CamPoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamPoint *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamPoint * >(argp1);
  result = (int) ((arg1)->y);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamPoint_apply_affine_transform(int argc, VALUE *argv, VALUE self) {
  CamPoint *arg1 = (CamPoint *) 0 ;
  CamAffineTransform *arg2 = 0 ;
  CamPoint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamPoint const *","apply_affine_transform", 1, self )); 
  }
  arg1 = reinterpret_cast< CamPoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamAffineTransform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamAffineTransform const &","apply_affine_transform", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamAffineTransform const &","apply_affine_transform", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamAffineTransform * >(argp2);
  result = ((CamPoint const *)arg1)->apply_affine_transform((CamAffineTransform const &)*arg2);
  vresult = SWIG_NewPointerObj((new CamPoint(static_cast< const CamPoint& >(result))), SWIGTYPE_p_CamPoint, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamPoint__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  CamPoint *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamPoint", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CamPoint", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamPoint *)new CamPoint(arg1,arg2);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamPoint_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamPoint_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamPoint);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamPoint__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamPoint *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamPoint *)new CamPoint();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CamPoint(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CamPoint__SWIG_1(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CamPoint__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "CamPoint.new", 
    "    CamPoint.new(int xp, int yp)\n"
    "    CamPoint.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_CamPoint(CamPoint *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamImage;

SWIGINTERN VALUE
_wrap_CamImage_nSize_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","nSize", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->nSize);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_id_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->id);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_nChannels_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","nChannels", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->nChannels);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alphaChannel_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alphaChannel", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->alphaChannel);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_depth_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","depth", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->depth);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_colorModel_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","colorModel", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (char *)(char *) ((arg1)->colorModel);
  {
    size_t size = 4;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    vresult = SWIG_FromCharPtrAndSize(result, size);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_channelSeq_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","channelSeq", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (char *)(char *) ((arg1)->channelSeq);
  {
    size_t size = 4;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    vresult = SWIG_FromCharPtrAndSize(result, size);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dataOrder_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","dataOrder", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->dataOrder);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_origin_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->origin);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_align_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","align", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->align);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_width_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->width);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_height_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->height);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_roi_set(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamROI *arg2 = (CamROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","roi", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamROI, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamROI *","roi", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamROI * >(argp2);
  if (arg1) (arg1)->roi = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_roi_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamROI *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","roi", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamROI *) ((arg1)->roi);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamROI, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_mask_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","mask", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (void *) ((arg1)->mask);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_imageId_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","imageId", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (void *) ((arg1)->imageId);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_misc_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","misc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (void *) ((arg1)->misc);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_imageSize_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","imageSize", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->imageSize);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_imageData_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","imageData", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (unsigned char *) ((arg1)->imageData);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_widthStep_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","widthStep", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int) ((arg1)->widthStep);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_borderMode_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","borderMode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int *)(int *) ((arg1)->borderMode);
  {
    VALUE arr = rb_ary_new2(4);
    for (int i = 0; i < 4; i++) {
      rb_ary_push(arr, INT2FIX(result[i]));
    }
    vresult = arr;
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_borderConst_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","borderConst", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int *)(int *) ((arg1)->borderConst);
  {
    VALUE arr = rb_ary_new2(4);
    for (int i = 0; i < 4; i++) {
      rb_ary_push(arr, INT2FIX(result[i]));
    }
    vresult = arr;
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_imageDataOrigin_get(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","imageDataOrigin", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (unsigned char *) ((arg1)->imageDataOrigin);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamImage__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamImage *)new CamImage();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamImage__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  CamImage *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamImage", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CamImage", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CamImage", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","CamImage", 4, argv[3] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (CamImage *)new CamImage(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamImage__SWIG_2(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  CamImage *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamImage", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CamImage", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CamImage", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (CamImage *)new CamImage(arg1,arg2,arg3);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamImage__SWIG_3(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  CamImage *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamImage", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CamImage", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamImage *)new CamImage(arg1,arg2);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamImage_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamImage_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamImage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamImage__SWIG_4(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = 0 ;
  CamImage *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const &","CamImage", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","CamImage", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)new CamImage((CamImage const &)*arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CamImage(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CamImage__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CamImage__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CamImage__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CamImage__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_CamImage__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CamImage.new", 
    "    CamImage.new()\n"
    "    CamImage.new(int width, int height, int depth, int channelseq)\n"
    "    CamImage.new(int width, int height, int depth)\n"
    "    CamImage.new(int width, int height)\n"
    "    CamImage.new(CamImage const &image)\n");
  
  return Qnil;
}


SWIGINTERN void
free_CamImage(CamImage *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}


/*
  Document-method: Camellia::CamImage.clone

  call-seq:
    clone -> CamImage

Create a duplicate of the class.
*/
SWIGINTERN VALUE
_wrap_CamImage_clone(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","clone", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)((CamImage const *)arg1)->clone();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_copy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","copy", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)((CamImage const *)arg1)->copy();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_copy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","copy", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","copy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","copy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->copy(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_copy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_copy__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_copy__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "CamImage.copy", 
    "    bool CamImage.copy()\n"
    "    bool CamImage.copy(CamImage &dest)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_allocatedq___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","allocated", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)((CamImage const *)arg1)->allocated();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","alloc", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","alloc", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (bool)(arg1)->alloc(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","alloc", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->alloc(arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc__SWIG_2(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->alloc(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_alloc(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_alloc__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_alloc__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_alloc__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "CamImage.alloc", 
    "    bool CamImage.alloc(int width, int height, int depth, int channelseq)\n"
    "    bool CamImage.alloc(int width, int height, int depth)\n"
    "    bool CamImage.alloc(int width, int height)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fill_header__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","fill_header", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","fill_header", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fill_header", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","fill_header", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","fill_header", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (bool)(arg1)->fill_header(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fill_header__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","fill_header", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","fill_header", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fill_header", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","fill_header", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->fill_header(arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fill_header__SWIG_2(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","fill_header", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","fill_header", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fill_header", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->fill_header(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_fill_header(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_fill_header__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_fill_header__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_fill_header__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "CamImage.fill_header", 
    "    bool CamImage.fill_header(int width, int height, int depth, int channelseq)\n"
    "    bool CamImage.fill_header(int width, int height, int depth)\n"
    "    bool CamImage.fill_header(int width, int height)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_deallocate(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","deallocate", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)(arg1)->deallocate();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_free(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","free", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)(arg1)->free();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc_rgb(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc_rgb", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc_rgb", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc_rgb", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->alloc_rgb(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc_rgba(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc_rgba", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc_rgba", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc_rgba", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->alloc_rgba(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc_bgr(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc_bgr", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc_bgr", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc_bgr", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->alloc_bgr(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc_bgra(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc_bgra", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc_bgra", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc_bgra", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->alloc_bgra(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc_yuv(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc_yuv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc_yuv", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc_yuv", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->alloc_yuv(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alloc_hls(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","alloc_hls", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc_hls", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","alloc_hls", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->alloc_hls(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_load_pgm(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","load_pgm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","load_pgm", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->load_pgm((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_save_pgm(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","save_pgm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","save_pgm", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)((CamImage const *)arg1)->save_pgm((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_save_raw_pgm(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","save_raw_pgm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","save_raw_pgm", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)((CamImage const *)arg1)->save_raw_pgm((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_load_bmp(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","load_bmp", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","load_bmp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->load_bmp((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_save_bmp(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","save_bmp", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","save_bmp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)((CamImage const *)arg1)->save_bmp((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_set_roi(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamROI *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","set_roi", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamROI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamROI const &","set_roi", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamROI const &","set_roi", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamROI * >(argp2);
  result = (bool)(arg1)->set_roi((CamROI const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_get_pixels(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *temp2 = 0 ;
  int tempn2 ;
  VALUE vresult = Qnil;
  
  arg2 = &temp2; arg3 = &tempn2;
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","get_pixels", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ((CamImage const *)arg1)->get_pixels(arg2,arg3);
  if (*arg2) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_FromCharPtrAndSize(*arg2,*arg3));
    delete[](*arg2);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_set_pixels(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","set_pixels", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  {
    arg2=STR2CSTR(argv[0]);
    arg3=(int)RSTRING(argv[0])->len;
  }
  result = (bool)(arg1)->set_pixels((char const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamImage.inspect

  call-seq:
    inspect

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_CamImage_inspect(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *temp2 = 0 ;
  int tempn2 ;
  VALUE vresult = Qnil;
  
  arg2 = &temp2; arg3 = &tempn2;
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ((CamImage const *)arg1)->inspect(arg2,arg3);
  if (*arg2) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_FromCharPtrAndSize(*arg2,*arg3));
    delete[](*arg2);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_view(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","view", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)((CamImage const *)arg1)->view();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_setN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","set", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->set(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_alpha_composite(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamImage *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","alpha_composite", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","alpha_composite", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","alpha_composite", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamImage &","alpha_composite", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","alpha_composite", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamImage * >(argp3);
  result = (bool)((CamImage const *)arg1)->alpha_composite((CamImage const &)*arg2,*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_square3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","erode_square3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->erode_square3();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_square3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","erode_square3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","erode_square3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","erode_square3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->erode_square3(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_circle5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","erode_circle5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->erode_circle5();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_circle5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","erode_circle5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","erode_circle5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","erode_circle5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->erode_circle5(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_circle7N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","erode_circle7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->erode_circle7();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_circle7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","erode_circle7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","erode_circle7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","erode_circle7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->erode_circle7(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_square3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","dilate_square3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->dilate_square3();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_square3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","dilate_square3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","dilate_square3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","dilate_square3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->dilate_square3(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_circle5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","dilate_circle5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->dilate_circle5();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_circle5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","dilate_circle5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","dilate_circle5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","dilate_circle5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->dilate_circle5(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_circle7N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","dilate_circle7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->dilate_circle7();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_circle7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","dilate_circle7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","dilate_circle7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","dilate_circle7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->dilate_circle7(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_gradient_square3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","morpho_gradient_square3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->morpho_gradient_square3();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_gradient_square3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","morpho_gradient_square3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","morpho_gradient_square3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","morpho_gradient_square3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->morpho_gradient_square3(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_gradient_circle5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","morpho_gradient_circle5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->morpho_gradient_circle5();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_gradient_circle5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","morpho_gradient_circle5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","morpho_gradient_circle5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","morpho_gradient_circle5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->morpho_gradient_circle5(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_gradient_circle7N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","morpho_gradient_circle7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->morpho_gradient_circle7();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_gradient_circle7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","morpho_gradient_circle7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","morpho_gradient_circle7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","morpho_gradient_circle7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->morpho_gradient_circle7(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_mathsN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMorphoMathsKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","morpho_maths", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","morpho_maths", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","morpho_maths", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamMorphoMathsKernel * >(argp2);
  result = (int)(arg1)->morpho_maths((CamMorphoMathsKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_morpho_maths(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamMorphoMathsKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","morpho_maths", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","morpho_maths", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","morpho_maths", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","morpho_maths", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","morpho_maths", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamMorphoMathsKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->morpho_maths(*arg2,(CamMorphoMathsKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_3x3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMorphoMathsKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","erode_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","erode_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","erode_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamMorphoMathsKernel * >(argp2);
  result = (int)(arg1)->erode_3x3((CamMorphoMathsKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_3x3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamMorphoMathsKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","erode_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","erode_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","erode_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","erode_3x3", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","erode_3x3", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamMorphoMathsKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->erode_3x3(*arg2,(CamMorphoMathsKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_3x3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMorphoMathsKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","dilate_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","dilate_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","dilate_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamMorphoMathsKernel * >(argp2);
  result = (int)(arg1)->dilate_3x3((CamMorphoMathsKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_3x3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamMorphoMathsKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","dilate_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","dilate_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","dilate_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","dilate_3x3", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","dilate_3x3", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamMorphoMathsKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->dilate_3x3(*arg2,(CamMorphoMathsKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_5x5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMorphoMathsKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","erode_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","erode_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","erode_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamMorphoMathsKernel * >(argp2);
  result = (int)(arg1)->erode_5x5((CamMorphoMathsKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_5x5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamMorphoMathsKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","erode_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","erode_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","erode_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","erode_5x5", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","erode_5x5", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamMorphoMathsKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->erode_5x5(*arg2,(CamMorphoMathsKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_5x5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMorphoMathsKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","dilate_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","dilate_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","dilate_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamMorphoMathsKernel * >(argp2);
  result = (int)(arg1)->dilate_5x5((CamMorphoMathsKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_5x5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamMorphoMathsKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","dilate_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","dilate_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","dilate_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","dilate_5x5", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","dilate_5x5", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamMorphoMathsKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->dilate_5x5(*arg2,(CamMorphoMathsKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_7x7N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMorphoMathsKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","erode_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","erode_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","erode_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamMorphoMathsKernel * >(argp2);
  result = (int)(arg1)->erode_7x7((CamMorphoMathsKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_erode_7x7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamMorphoMathsKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","erode_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","erode_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","erode_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","erode_7x7", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","erode_7x7", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamMorphoMathsKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->erode_7x7(*arg2,(CamMorphoMathsKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_7x7N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMorphoMathsKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","dilate_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","dilate_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","dilate_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamMorphoMathsKernel * >(argp2);
  result = (int)(arg1)->dilate_7x7((CamMorphoMathsKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_dilate_7x7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamMorphoMathsKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","dilate_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","dilate_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","dilate_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamMorphoMathsKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamMorphoMathsKernel const &","dilate_7x7", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamMorphoMathsKernel const &","dilate_7x7", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamMorphoMathsKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->dilate_7x7(*arg2,(CamMorphoMathsKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_3x3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamLinearFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","linear_filter_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamLinearFilterKernel * >(argp2);
  result = (int)(arg1)->linear_filter_3x3((CamLinearFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_3x3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamLinearFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","linear_filter_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","linear_filter_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","linear_filter_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_3x3", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_3x3", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamLinearFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->linear_filter_3x3(*arg2,(CamLinearFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_5x5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamLinearFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","linear_filter_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamLinearFilterKernel * >(argp2);
  result = (int)(arg1)->linear_filter_5x5((CamLinearFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_5x5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamLinearFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","linear_filter_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","linear_filter_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","linear_filter_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_5x5", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_5x5", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamLinearFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->linear_filter_5x5(*arg2,(CamLinearFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_abs_3x3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamLinearFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","linear_filter_abs_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_abs_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_abs_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamLinearFilterKernel * >(argp2);
  result = (int)(arg1)->linear_filter_abs_3x3((CamLinearFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_abs_3x3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamLinearFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","linear_filter_abs_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","linear_filter_abs_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","linear_filter_abs_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_abs_3x3", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_abs_3x3", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamLinearFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->linear_filter_abs_3x3(*arg2,(CamLinearFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_abs_5x5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamLinearFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","linear_filter_abs_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_abs_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_abs_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamLinearFilterKernel * >(argp2);
  result = (int)(arg1)->linear_filter_abs_5x5((CamLinearFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_linear_filter_abs_5x5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamLinearFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","linear_filter_abs_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","linear_filter_abs_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","linear_filter_abs_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamLinearFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamLinearFilterKernel const &","linear_filter_abs_5x5", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamLinearFilterKernel const &","linear_filter_abs_5x5", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamLinearFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->linear_filter_abs_5x5(*arg2,(CamLinearFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_vN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sobel_v", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)(arg1)->sobel_v();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_hN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sobel_h", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)(arg1)->sobel_h();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_v_absN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sobel_v_abs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)(arg1)->sobel_v_abs();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_h_absN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sobel_h_abs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (bool)(arg1)->sobel_h_abs();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_v(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sobel_v", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sobel_v", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sobel_v", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->sobel_v(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_h(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sobel_h", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sobel_h", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sobel_h", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->sobel_h(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_v_abs(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sobel_v_abs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sobel_v_abs", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sobel_v_abs", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->sobel_v_abs(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sobel_h_abs(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sobel_h_abs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sobel_h_abs", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sobel_h_abs", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->sobel_h_abs(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_3x3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamSepFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sep_filter_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamSepFilterKernel * >(argp2);
  result = (int)(arg1)->sep_filter_3x3((CamSepFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_3x3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamSepFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sep_filter_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sep_filter_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sep_filter_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_3x3", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_3x3", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamSepFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->sep_filter_3x3(*arg2,(CamSepFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_5x5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamSepFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sep_filter_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamSepFilterKernel * >(argp2);
  result = (int)(arg1)->sep_filter_5x5((CamSepFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_5x5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamSepFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sep_filter_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sep_filter_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sep_filter_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_5x5", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_5x5", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamSepFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->sep_filter_5x5(*arg2,(CamSepFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_7x7N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamSepFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sep_filter_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamSepFilterKernel * >(argp2);
  result = (int)(arg1)->sep_filter_7x7((CamSepFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_7x7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamSepFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sep_filter_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sep_filter_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sep_filter_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_7x7", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_7x7", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamSepFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->sep_filter_7x7(*arg2,(CamSepFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_abs_3x3N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamSepFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sep_filter_abs_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_abs_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_abs_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamSepFilterKernel * >(argp2);
  result = (int)(arg1)->sep_filter_abs_3x3((CamSepFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_abs_3x3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamSepFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sep_filter_abs_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sep_filter_abs_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sep_filter_abs_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_abs_3x3", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_abs_3x3", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamSepFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->sep_filter_abs_3x3(*arg2,(CamSepFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_abs_5x5N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamSepFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sep_filter_abs_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_abs_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_abs_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamSepFilterKernel * >(argp2);
  result = (int)(arg1)->sep_filter_abs_5x5((CamSepFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_abs_5x5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamSepFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sep_filter_abs_5x5", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sep_filter_abs_5x5", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sep_filter_abs_5x5", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_abs_5x5", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_abs_5x5", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamSepFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->sep_filter_abs_5x5(*arg2,(CamSepFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_abs_7x7N___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamSepFilterKernel *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","sep_filter_abs_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_abs_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_abs_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamSepFilterKernel * >(argp2);
  result = (int)(arg1)->sep_filter_abs_7x7((CamSepFilterKernel const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sep_filter_abs_7x7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamSepFilterKernel *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sep_filter_abs_7x7", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","sep_filter_abs_7x7", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","sep_filter_abs_7x7", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamSepFilterKernel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamSepFilterKernel const &","sep_filter_abs_7x7", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamSepFilterKernel const &","sep_filter_abs_7x7", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamSepFilterKernel * >(argp3);
  result = (int)((CamImage const *)arg1)->sep_filter_abs_7x7(*arg2,(CamSepFilterKernel const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fixed_filter(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","fixed_filter", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","fixed_filter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","fixed_filter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fixed_filter", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((CamImage const *)arg1)->fixed_filter(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fixed_filterN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","fixed_filter", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","fixed_filter", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->fixed_filter(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_line(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_line", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","draw_line", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_line", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","draw_line", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","draw_line", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","draw_line", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  result = (bool)(arg1)->draw_line(arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_accumulate_line(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","accumulate_line", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","accumulate_line", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","accumulate_line", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","accumulate_line", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","accumulate_line", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","accumulate_line", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  result = (bool)(arg1)->accumulate_line(arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_rectangle(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_rectangle", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","draw_rectangle", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_rectangle", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","draw_rectangle", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","draw_rectangle", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","draw_rectangle", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  result = (bool)(arg1)->draw_rectangle(arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_text_16s(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_text_16s", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","draw_text_16s", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_text_16s", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","draw_text_16s", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","draw_text_16s", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","draw_text_16s", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "int","draw_text_16s", 7, argv[5] ));
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "int","draw_text_16s", 8, argv[6] ));
  } 
  arg8 = static_cast< int >(val8);
  result = (bool)(arg1)->draw_text_16s((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_text_bitmap(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  CamBitmapFont *arg5 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_text_bitmap", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","draw_text_bitmap", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_text_bitmap", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","draw_text_bitmap", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_CamBitmapFont,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "CamBitmapFont const &","draw_text_bitmap", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamBitmapFont const &","draw_text_bitmap", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< CamBitmapFont * >(argp5);
  result = (bool)(arg1)->draw_text_bitmap((char const *)arg2,arg3,arg4,(CamBitmapFont const &)*arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_circle(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_circle", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","draw_circle", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_circle", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","draw_circle", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","draw_circle", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (bool)(arg1)->draw_circle(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_ellipse(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_ellipse", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","draw_ellipse", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_ellipse", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","draw_ellipse", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","draw_ellipse", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","draw_ellipse", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  result = (bool)(arg1)->draw_ellipse(arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_plot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","plot", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","plot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","plot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","plot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","plot", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (bool)(arg1)->plot(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_plot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","plot", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","plot", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","plot", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","plot", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->plot(arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_plot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_plot__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_plot__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "CamImage.plot", 
    "    bool CamImage.plot(int x, int y, int color, int kind)\n"
    "    bool CamImage.plot(int x, int y, int color)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fill_color__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","fill_color", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","fill_color", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fill_color", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","fill_color", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","fill_color", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (int)(arg1)->fill_color(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fill_color__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","fill_color", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","fill_color", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fill_color", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","fill_color", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)(arg1)->fill_color(arg2,arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_fill_color(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_fill_color__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_fill_color__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "CamImage.fill_color", 
    "    int CamImage.fill_color(int x, int y, int fillcolor, int tolerance)\n"
    "    int CamImage.fill_color(int x, int y, int fillcolor)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_warping(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  CamPoint *arg5 = 0 ;
  CamPoint *arg6 = 0 ;
  CamPoint *arg7 = 0 ;
  CamPoint *arg8 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","warping", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","warping", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","warping", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","warping", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","warping", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_CamPoint,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "CamPoint const &","warping", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamPoint const &","warping", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< CamPoint * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_CamPoint,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "CamPoint const &","warping", 6, argv[4] )); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamPoint const &","warping", 6, argv[4])); 
  }
  arg6 = reinterpret_cast< CamPoint * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_CamPoint,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "CamPoint const &","warping", 7, argv[5] )); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamPoint const &","warping", 7, argv[5])); 
  }
  arg7 = reinterpret_cast< CamPoint * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8, SWIGTYPE_p_CamPoint,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "CamPoint const &","warping", 8, argv[6] )); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamPoint const &","warping", 8, argv[6])); 
  }
  arg8 = reinterpret_cast< CamPoint * >(argp8);
  result = (bool)((CamImage const *)arg1)->warping(*arg2,arg3,arg4,(CamPoint const &)*arg5,(CamPoint const &)*arg6,(CamPoint const &)*arg7,(CamPoint const &)*arg8);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_scale(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","scale", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","scale", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->scale(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_set_mask__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","set_mask", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage const &","set_mask", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage const &","set_mask", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  result = (bool)(arg1)->set_mask((CamRLEImage const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_set_mask__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","set_mask", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","set_mask", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","set_mask", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)(arg1)->set_mask((CamImage const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_set_mask(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_set_mask__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_set_mask__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "CamImage.set_mask", 
    "    bool CamImage.set_mask(CamRLEImage const &mask)\n"
    "    bool CamImage.set_mask(CamImage const &mask)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_apply_lutN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTable *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","apply_lut", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable const &","apply_lut", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","apply_lut", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  result = (bool)(arg1)->apply_lut((CamTable const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_apply_lut(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","apply_lut", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","apply_lut", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","apply_lut", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","apply_lut", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","apply_lut", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)((CamImage const *)arg1)->apply_lut(*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_yuv__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_yuv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)((CamImage const *)arg1)->to_yuv();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_yuv__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_yuv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","to_yuv", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","to_yuv", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->to_yuv(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_to_yuv(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_to_yuv__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_to_yuv__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "to_yuv.new", 
    "    to_yuv.new()\n"
    "    to_yuv.new(CamImage &dest)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_y__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)((CamImage const *)arg1)->to_y();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_y__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","to_y", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","to_y", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->to_y(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_to_y(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_to_y__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_to_y__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "to_y.new", 
    "    to_y.new()\n"
    "    to_y.new(CamImage &dest)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_rgb__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_rgb", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)((CamImage const *)arg1)->to_rgb();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_rgb__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_rgb", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","to_rgb", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","to_rgb", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->to_rgb(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_to_rgb(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_to_rgb__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_to_rgb__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "to_rgb.new", 
    "    to_rgb.new()\n"
    "    to_rgb.new(CamImage &dest)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_hls__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_hls", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)((CamImage const *)arg1)->to_hls();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_to_hls__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","to_hls", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","to_hls", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","to_hls", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->to_hls(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_to_hls(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_to_hls__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_to_hls__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "to_hls.new", 
    "    to_hls.new()\n"
    "    to_hls.new(CamImage &dest)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamRLEImage *)((CamImage const *)arg1)->encode();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode_lut__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTable *arg2 = 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode_lut", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable const &","encode_lut", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","encode_lut", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  result = (CamRLEImage *)((CamImage const *)arg1)->encode_lut((CamTable const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode_threshold__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode_threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","encode_threshold", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamRLEImage *)((CamImage const *)arg1)->encode_threshold(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode_threshold_inv__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode_threshold_inv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","encode_threshold_inv", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamRLEImage *)((CamImage const *)arg1)->encode_threshold_inv(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode_color(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTable *arg2 = 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode_color", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable const &","encode_color", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","encode_color", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  result = (CamRLEImage *)((CamImage const *)arg1)->encode_color((CamTable const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","encode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","encode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->encode(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_encode(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_encode__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_encode__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "encode.new", 
    "    encode.new()\n"
    "    encode.new(CamRLEImage &dest)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode_lut__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode_lut", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","encode_lut", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","encode_lut", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","encode_lut", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","encode_lut", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)((CamImage const *)arg1)->encode_lut(*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_encode_lut(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamTable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_encode_lut__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamTable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CamImage_encode_lut__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CamImage.encode_lut", 
    "    bool CamImage.encode_lut(CamTable const &LUT)\n"
    "    bool CamImage.encode_lut(CamRLEImage &dest, CamTable const &LUT)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode_threshold__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode_threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","encode_threshold", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","encode_threshold", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","encode_threshold", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((CamImage const *)arg1)->encode_threshold(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_encode_threshold(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CamImage_encode_threshold__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_encode_threshold__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "encode_threshold.new", 
    "    encode_threshold.new(int threshold)\n"
    "    encode_threshold.new(CamRLEImage &dest, int threshold)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_encode_threshold_inv__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","encode_threshold_inv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","encode_threshold_inv", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","encode_threshold_inv", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","encode_threshold_inv", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((CamImage const *)arg1)->encode_threshold_inv(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_encode_threshold_inv(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CamImage_encode_threshold_inv__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_encode_threshold_inv__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "encode_threshold_inv.new", 
    "    encode_threshold_inv.new(int threshold)\n"
    "    encode_threshold_inv.new(CamRLEImage &dest, int threshold)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_threshold(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","threshold", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","threshold", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","threshold", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((CamImage const *)arg1)->threshold(*arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_threshold_inv(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","threshold_inv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","threshold_inv", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","threshold_inv", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","threshold_inv", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((CamImage const *)arg1)->threshold_inv(*arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_abs(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","abs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","abs", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","abs", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (int)((CamImage const *)arg1)->abs(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_thresholdN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","threshold", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->threshold(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_threshold_invN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","threshold_inv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","threshold_inv", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->threshold_inv(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_absN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","abs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (int)(arg1)->abs();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithmN_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","arithm", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","arithm", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","arithm", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (int)(arg1)->arithm(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithmN_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","arithm", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","arithm", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)(arg1)->arithm(arg2,arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithmN_____SWIG_2(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","arithm", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","arithm", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->arithm(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithmN_____SWIG_3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","arithm", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->arithm(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_arithmN___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CamImage_arithmN_____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_arithmN_____SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_arithmN_____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_arithmN_____SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "CamImage.arithm!", 
    "    int CamImage.arithm!(int operation, int c1, int c2, int c3)\n"
    "    int CamImage.arithm!(int operation, int c1, int c2)\n"
    "    int CamImage.arithm!(int operation, int c1)\n"
    "    int CamImage.arithm!(int operation)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","arithm", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","arithm", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","arithm", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  result = (int)((CamImage const *)arg1)->arithm(*arg2,arg3,arg4,arg5,arg6);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","arithm", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","arithm", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (int)((CamImage const *)arg1)->arithm(*arg2,arg3,arg4,arg5);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_2(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","arithm", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)((CamImage const *)arg1)->arithm(*arg2,arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_3(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","arithm", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((CamImage const *)arg1)->arithm(*arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_4(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamImage *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamImage &","arithm", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamImage * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","arithm", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","arithm", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "int","arithm", 7, argv[5] ));
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "int","arithm", 8, argv[6] ));
  } 
  arg8 = static_cast< int >(val8);
  result = (int)((CamImage const *)arg1)->arithm((CamImage const &)*arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_5(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamImage *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamImage &","arithm", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamImage * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","arithm", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","arithm", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "int","arithm", 7, argv[5] ));
  } 
  arg7 = static_cast< int >(val7);
  result = (int)((CamImage const *)arg1)->arithm((CamImage const &)*arg2,*arg3,arg4,arg5,arg6,arg7);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_6(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamImage *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamImage &","arithm", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamImage * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","arithm", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "int","arithm", 6, argv[4] ));
  } 
  arg6 = static_cast< int >(val6);
  result = (int)((CamImage const *)arg1)->arithm((CamImage const &)*arg2,*arg3,arg4,arg5,arg6);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_7(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamImage *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamImage &","arithm", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamImage * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","arithm", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (int)((CamImage const *)arg1)->arithm((CamImage const &)*arg2,*arg3,arg4,arg5);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_arithm__SWIG_8(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamImage *arg3 = 0 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","arithm", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","arithm", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","arithm", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamImage &","arithm", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","arithm", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamImage * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","arithm", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)((CamImage const *)arg1)->arithm((CamImage const &)*arg2,*arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_arithm(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_arithm__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamImage, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_arithm__SWIG_8(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_arithm__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamImage, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_arithm__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_arithm__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamImage, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CamImage_arithm__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CamImage_arithm__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamImage, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_CamImage_arithm__SWIG_5(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamImage, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_CamImage_arithm__SWIG_4(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "CamImage.arithm", 
    "    int CamImage.arithm(CamImage &dest, int operation, int c1, int c2, int c3)\n"
    "    int CamImage.arithm(CamImage &dest, int operation, int c1, int c2)\n"
    "    int CamImage.arithm(CamImage &dest, int operation, int c1)\n"
    "    int CamImage.arithm(CamImage &dest, int operation)\n"
    "    int CamImage.arithm(CamImage const &source2, CamImage &dest, int operation, int c1, int c2, int c3, int c4)\n"
    "    int CamImage.arithm(CamImage const &source2, CamImage &dest, int operation, int c1, int c2, int c3)\n"
    "    int CamImage.arithm(CamImage const &source2, CamImage &dest, int operation, int c1, int c2)\n"
    "    int CamImage.arithm(CamImage const &source2, CamImage &dest, int operation, int c1)\n"
    "    int CamImage.arithm(CamImage const &source2, CamImage &dest, int operation)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_measures(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamMeasuresResults result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","measures", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = ((CamImage const *)arg1)->measures();
  vresult = SWIG_NewPointerObj((new CamMeasuresResults(static_cast< const CamMeasuresResults& >(result))), SWIGTYPE_p_CamMeasuresResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_average_deviation__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","average_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","average_deviation", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (float)((CamImage const *)arg1)->average_deviation(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_average_deviation__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","average_deviation", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (float)((CamImage const *)arg1)->average_deviation();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_average_deviation(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_average_deviation__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CamImage_average_deviation__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "CamImage.average_deviation", 
    "    float CamImage.average_deviation(int average)\n"
    "    float CamImage.average_deviation()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sum_hv(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTable *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sum_hv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable &","sum_hv", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable &","sum_hv", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable &","sum_hv", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable &","sum_hv", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)((CamImage const *)arg1)->sum_hv(*arg2,*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sum_h(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTable *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sum_h", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable &","sum_h", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable &","sum_h", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  result = (bool)((CamImage const *)arg1)->sum_h(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_sum_v(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTable *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","sum_v", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable &","sum_v", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable &","sum_v", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  result = (bool)((CamImage const *)arg1)->sum_v(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_histogram(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTable *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","histogram", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable &","histogram", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable &","histogram", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  result = (int)((CamImage const *)arg1)->histogram(*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_histogram_equalization__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  int arg4 ;
  CamImage *arg5 = (CamImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","histogram_equalization", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","histogram_equalization", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","histogram_equalization", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","histogram_equalization", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","histogram_equalization", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","histogram_equalization", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "CamImage *","histogram_equalization", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< CamImage * >(argp5);
  result = (bool)(arg1)->histogram_equalization(*arg2,(CamTable const &)*arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_histogram_equalization__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","histogram_equalization", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","histogram_equalization", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","histogram_equalization", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","histogram_equalization", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","histogram_equalization", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","histogram_equalization", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->histogram_equalization(*arg2,(CamTable const &)*arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_histogram_equalization__SWIG_2(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","histogram_equalization", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","histogram_equalization", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","histogram_equalization", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","histogram_equalization", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","histogram_equalization", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)(arg1)->histogram_equalization(*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_histogram_equalization(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamTable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CamImage_histogram_equalization__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamTable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_histogram_equalization__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamTable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_CamImage, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CamImage_histogram_equalization__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "CamImage.histogram_equalization", 
    "    bool CamImage.histogram_equalization(CamImage &dest, CamTable const &src_histo, int option, CamImage *work)\n"
    "    bool CamImage.histogram_equalization(CamImage &dest, CamTable const &src_histo, int option)\n"
    "    bool CamImage.histogram_equalization(CamImage &dest, CamTable const &src_histo)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_histogram_2_channels__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  CamImage *arg4 = 0 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","histogram_2_channels", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","histogram_2_channels", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","histogram_2_channels", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "CamImage &","histogram_2_channels", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","histogram_2_channels", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< CamImage * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","histogram_2_channels", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  result = (bool)((CamImage const *)arg1)->histogram_2_channels(arg2,arg3,*arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_histogram_2_channels__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  CamImage *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","histogram_2_channels", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","histogram_2_channels", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","histogram_2_channels", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "CamImage &","histogram_2_channels", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","histogram_2_channels", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< CamImage * >(argp4);
  result = (bool)((CamImage const *)arg1)->histogram_2_channels(arg2,arg3,*arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_histogram_2_channels(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_CamImage, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CamImage_histogram_2_channels__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_CamImage, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CamImage_histogram_2_channels__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "CamImage.histogram_2_channels", 
    "    bool CamImage.histogram_2_channels(int ch1, int ch2, CamImage &result, int size)\n"
    "    bool CamImage.histogram_2_channels(int ch1, int ch2, CamImage &result)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_find_threshold(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","find_threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","find_threshold", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((CamImage const *)arg1)->find_threshold(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_hough_circle(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  int temp7 ;
  int res7 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","hough_circle", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","hough_circle", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","hough_circle", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","hough_circle", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)((CamImage const *)arg1)->hough_circle(arg2,arg3,arg4,*arg5,*arg6,*arg7);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res5)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_int, new_flags));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_hierarchical_watershed(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTableOfBasins *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","hierarchical_watershed", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","hierarchical_watershed", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","hierarchical_watershed", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTableOfBasins,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTableOfBasins &","hierarchical_watershed", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTableOfBasins &","hierarchical_watershed", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTableOfBasins * >(argp3);
  result = (int)((CamImage const *)arg1)->hierarchical_watershed(*arg2,*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_hierarchical_watershed_contours(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTableOfBasins *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","hierarchical_watershed_contours", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","hierarchical_watershed_contours", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","hierarchical_watershed_contours", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTableOfBasins,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTableOfBasins &","hierarchical_watershed_contours", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTableOfBasins &","hierarchical_watershed_contours", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTableOfBasins * >(argp3);
  result = (int)((CamImage const *)arg1)->hierarchical_watershed_contours(*arg2,*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_hierarchical_watershed_regionsN___(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamTableOfBasins *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","hierarchical_watershed_regions", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTableOfBasins,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTableOfBasins const &","hierarchical_watershed_regions", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTableOfBasins const &","hierarchical_watershed_regions", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTableOfBasins * >(argp2);
  result = (int)(arg1)->hierarchical_watershed_regions((CamTableOfBasins const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_keypointsN_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoints *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_keypoints", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoints,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoints const &","draw_keypoints", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoints const &","draw_keypoints", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoints * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_keypoints", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->draw_keypoints((CamKeypoints const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_keypointsN_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoints *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_keypoints", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoints,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoints const &","draw_keypoints", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoints const &","draw_keypoints", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoints * >(argp2);
  result = (bool)(arg1)->draw_keypoints((CamKeypoints const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_draw_keypointsN___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoints, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_draw_keypointsN_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoints, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_draw_keypointsN_____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CamImage.draw_keypoints!", 
    "    bool CamImage.draw_keypoints!(CamKeypoints const &points, int color)\n"
    "    bool CamImage.draw_keypoints!(CamKeypoints const &points)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_keypoint__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoint *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_keypoint", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoint const &","draw_keypoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoint const &","draw_keypoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoint * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw_keypoint", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->draw_keypoint((CamKeypoint const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_draw_keypoint__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoint *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage *","draw_keypoint", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoint const &","draw_keypoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoint const &","draw_keypoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoint * >(argp2);
  result = (bool)(arg1)->draw_keypoint((CamKeypoint const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_draw_keypoint(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_draw_keypoint__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_draw_keypoint__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CamImage.draw_keypoint", 
    "    bool CamImage.draw_keypoint(CamKeypoint const &point, int color)\n"
    "    bool CamImage.draw_keypoint(CamKeypoint const &point)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_harris__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoints *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","harris", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoints,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoints &","harris", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoints &","harris", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoints * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","harris", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((CamImage const *)arg1)->harris(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_harris__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoints *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","harris", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoints,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoints &","harris", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoints &","harris", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoints * >(argp2);
  result = (bool)((CamImage const *)arg1)->harris(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_harris(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoints, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_harris__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoints, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_harris__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CamImage.harris", 
    "    bool CamImage.harris(CamKeypoints &points, int k)\n"
    "    bool CamImage.harris(CamKeypoints &points)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_integral_image__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","integral_image", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","integral_image", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","integral_image", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamImage const *)arg1)->integral_image(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_integral_image__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","integral_image", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  result = (CamImage *)((CamImage const *)arg1)->integral_image();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_integral_image(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamImage_integral_image__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamImage_integral_image__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "integral_image.new", 
    "    integral_image.new(CamImage &dest)\n"
    "    integral_image.new()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fast_hessian_detector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoints *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","fast_hessian_detector", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoints,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoints &","fast_hessian_detector", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoints &","fast_hessian_detector", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoints * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fast_hessian_detector", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","fast_hessian_detector", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)((CamImage const *)arg1)->fast_hessian_detector(*arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamImage_fast_hessian_detector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamImage *arg1 = (CamImage *) 0 ;
  CamKeypoints *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamImage const *","fast_hessian_detector", 1, self )); 
  }
  arg1 = reinterpret_cast< CamImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoints,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoints &","fast_hessian_detector", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoints &","fast_hessian_detector", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoints * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","fast_hessian_detector", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((CamImage const *)arg1)->fast_hessian_detector(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamImage_fast_hessian_detector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoints, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamImage_fast_hessian_detector__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamKeypoints, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CamImage_fast_hessian_detector__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "CamImage.fast_hessian_detector", 
    "    bool CamImage.fast_hessian_detector(CamKeypoints &points, int threshold, int options)\n"
    "    bool CamImage.fast_hessian_detector(CamKeypoints &points, int threshold)\n");
  
  return Qnil;
}


swig_class cCamMorphoMathsKernel;

SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_source1_set(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","source1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","source1", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->source1 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_source1_get(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","source1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  result = (int) ((arg1)->source1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_source2_set(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","source2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","source2", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->source2 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_source2_get(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","source2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  result = (int) ((arg1)->source2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_operation_set(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","operation", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operation", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->operation = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_operation_get(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","operation", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  result = (int) ((arg1)->operation);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamMorphoMathsKernel_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamMorphoMathsKernel);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamMorphoMathsKernel(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamMorphoMathsKernel *)new CamMorphoMathsKernel();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_set_dilate(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","set_dilate", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_dilate", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","set_dilate", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","set_dilate", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->set_dilate(arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_get_dilate(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","get_dilate", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","get_dilate", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","get_dilate", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->get_dilate(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_set_erode(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","set_erode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_erode", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","set_erode", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","set_erode", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->set_erode(arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMorphoMathsKernel_get_erode(int argc, VALUE *argv, VALUE self) {
  CamMorphoMathsKernel *arg1 = (CamMorphoMathsKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMorphoMathsKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMorphoMathsKernel *","get_erode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMorphoMathsKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","get_erode", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","get_erode", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->get_erode(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamMorphoMathsKernel(CamMorphoMathsKernel *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamRun;

SWIGINTERN VALUE
_wrap_CamRun_value_set(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned short","value", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->value = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRun_value_get(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  result = (unsigned short) ((arg1)->value);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRun_length_set(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned short","length", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->length = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRun_length_get(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  result = (unsigned short) ((arg1)->length);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRun_blob_set(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","blob", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned short","blob", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->blob = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRun_blob_get(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","blob", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  result = (unsigned short) ((arg1)->blob);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRun_line_set(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","line", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned short","line", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->line = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRun_line_get(int argc, VALUE *argv, VALUE self) {
  CamRun *arg1 = (CamRun *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRun, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRun *","line", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRun * >(argp1);
  result = (unsigned short) ((arg1)->line);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamRun_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamRun_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamRun);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamRun(int argc, VALUE *argv, VALUE self) {
  CamRun *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamRun *)new CamRun();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamRun(CamRun *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamMeasuresResults;

SWIGINTERN VALUE
_wrap_CamMeasuresResults_min_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","min", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","min", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->min = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_min_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","min", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->min);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_xmin_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","xmin", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","xmin", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->xmin = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_xmin_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","xmin", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->xmin);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_ymin_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","ymin", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ymin", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ymin = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_ymin_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","ymin", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->ymin);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_max_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","max", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","max", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->max = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_max_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","max", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->max);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_xmax_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","xmax", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","xmax", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->xmax = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_xmax_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","xmax", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->xmax);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_ymax_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","ymax", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ymax", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ymax = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_ymax_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","ymax", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->ymax);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_average_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","average", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","average", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->average = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_average_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","average", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->average);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_sum_set(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","sum", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->sum = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamMeasuresResults_sum_get(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *arg1 = (CamMeasuresResults *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamMeasuresResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamMeasuresResults *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< CamMeasuresResults * >(argp1);
  result = (int) ((arg1)->sum);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamMeasuresResults_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamMeasuresResults_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamMeasuresResults);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamMeasuresResults(int argc, VALUE *argv, VALUE self) {
  CamMeasuresResults *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamMeasuresResults *)new CamMeasuresResults();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamMeasuresResults(CamMeasuresResults *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamLinearFilterKernel;

SWIGINTERN VALUE
_wrap_CamLinearFilterKernel_coeff1_set(int argc, VALUE *argv, VALUE self) {
  CamLinearFilterKernel *arg1 = (CamLinearFilterKernel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamLinearFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamLinearFilterKernel *","coeff1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamLinearFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","coeff1", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->coeff1 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamLinearFilterKernel_coeff1_get(int argc, VALUE *argv, VALUE self) {
  CamLinearFilterKernel *arg1 = (CamLinearFilterKernel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamLinearFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamLinearFilterKernel *","coeff1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamLinearFilterKernel * >(argp1);
  result = (int) ((arg1)->coeff1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamLinearFilterKernel_coeff2_set(int argc, VALUE *argv, VALUE self) {
  CamLinearFilterKernel *arg1 = (CamLinearFilterKernel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamLinearFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamLinearFilterKernel *","coeff2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamLinearFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","coeff2", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->coeff2 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamLinearFilterKernel_coeff2_get(int argc, VALUE *argv, VALUE self) {
  CamLinearFilterKernel *arg1 = (CamLinearFilterKernel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamLinearFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamLinearFilterKernel *","coeff2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamLinearFilterKernel * >(argp1);
  result = (int) ((arg1)->coeff2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamLinearFilterKernel_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamLinearFilterKernel_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamLinearFilterKernel);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamLinearFilterKernel(int argc, VALUE *argv, VALUE self) {
  CamLinearFilterKernel *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamLinearFilterKernel *)new CamLinearFilterKernel();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamLinearFilterKernel_set(int argc, VALUE *argv, VALUE self) {
  CamLinearFilterKernel *arg1 = (CamLinearFilterKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamLinearFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamLinearFilterKernel *","set", 1, self )); 
  }
  arg1 = reinterpret_cast< CamLinearFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","set", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","set", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->set(arg2,arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamLinearFilterKernel_get(int argc, VALUE *argv, VALUE self) {
  CamLinearFilterKernel *arg1 = (CamLinearFilterKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamLinearFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamLinearFilterKernel *","get", 1, self )); 
  }
  arg1 = reinterpret_cast< CamLinearFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","get", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","get", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->get(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamLinearFilterKernel(CamLinearFilterKernel *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamSepFilterKernel;

SWIGINTERN VALUE
_wrap_CamSepFilterKernel_coeff1_set(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","coeff1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","coeff1", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->coeff1 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamSepFilterKernel_coeff1_get(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","coeff1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  result = (int) ((arg1)->coeff1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamSepFilterKernel_coeff2_set(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","coeff2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","coeff2", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->coeff2 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamSepFilterKernel_coeff2_get(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","coeff2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  result = (int) ((arg1)->coeff2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamSepFilterKernel_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamSepFilterKernel_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamSepFilterKernel);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamSepFilterKernel(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamSepFilterKernel *)new CamSepFilterKernel();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamSepFilterKernel_set_x(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","set_x", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_x", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","set_x", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->set_x(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamSepFilterKernel_set_y(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","set_y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_y", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","set_y", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->set_y(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamSepFilterKernel_get_x(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","get_x", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","get_x", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->get_x(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamSepFilterKernel_get_y(int argc, VALUE *argv, VALUE self) {
  CamSepFilterKernel *arg1 = (CamSepFilterKernel *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamSepFilterKernel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamSepFilterKernel *","get_y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamSepFilterKernel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","get_y", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->get_y(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamSepFilterKernel(CamSepFilterKernel *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamBasin;

SWIGINTERN VALUE
_wrap_CamBasin_dynamics_get(int argc, VALUE *argv, VALUE self) {
  CamBasin *arg1 = (CamBasin *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBasin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBasin *","dynamics", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBasin * >(argp1);
  result = (int) ((arg1)->dynamics);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBasin_minimum_get(int argc, VALUE *argv, VALUE self) {
  CamBasin *arg1 = (CamBasin *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBasin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBasin *","minimum", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBasin * >(argp1);
  result = (int) ((arg1)->minimum);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBasin_flooded_get(int argc, VALUE *argv, VALUE self) {
  CamBasin *arg1 = (CamBasin *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBasin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBasin *","flooded", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBasin * >(argp1);
  result = (int) ((arg1)->flooded);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBasin_surface_get(int argc, VALUE *argv, VALUE self) {
  CamBasin *arg1 = (CamBasin *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBasin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBasin *","surface", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBasin * >(argp1);
  result = (int) ((arg1)->surface);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBasin_accsurface_get(int argc, VALUE *argv, VALUE self) {
  CamBasin *arg1 = (CamBasin *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBasin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBasin *","accsurface", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBasin * >(argp1);
  result = (int) ((arg1)->accsurface);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBasin_x_get(int argc, VALUE *argv, VALUE self) {
  CamBasin *arg1 = (CamBasin *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBasin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBasin *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBasin * >(argp1);
  result = (unsigned short) ((arg1)->x);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBasin_y_get(int argc, VALUE *argv, VALUE self) {
  CamBasin *arg1 = (CamBasin *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBasin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBasin *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBasin * >(argp1);
  result = (unsigned short) ((arg1)->y);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamBasin_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamBasin_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamBasin);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamBasin(int argc, VALUE *argv, VALUE self) {
  CamBasin *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamBasin *)new CamBasin();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamBasin(CamBasin *arg1) {
    delete arg1;
}

swig_class cCamKeypoint;

SWIGINTERN VALUE
_wrap_CamKeypoint_descriptor_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","descriptor", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int [128]","descriptor", 2, argv[0] )); 
  } 
  arg2 = reinterpret_cast< int * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) arg1->descriptor[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""descriptor""' of type '""int [128]""'");
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_descriptor_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","descriptor", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (int *)(int *) ((arg1)->descriptor);
  {
    VALUE arr = rb_ary_new2(128);
    for (int i = 0; i < 128; i++) {
      rb_ary_push(arr, INT2FIX(result[i]));
    }
    vresult = arr;
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_x_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","x", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_x_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (int) ((arg1)->x);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_y_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","y", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_y_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (int) ((arg1)->y);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_scale_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","scale", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->scale = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_scale_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","scale", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (int) ((arg1)->scale);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_angle_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","angle", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","angle", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->angle = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_angle_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","angle", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (int) ((arg1)->angle);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_value_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","value", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->value = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_value_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (int) ((arg1)->value);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamKeypoint.size

  call-seq:
    size -> int

Size or Length of the CamKeypoint.
*/
SWIGINTERN VALUE
_wrap_CamKeypoint_size_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (int) ((arg1)->size);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_internal_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","internal", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (void *) ((arg1)->internal);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_set_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  CamKeypoints *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","set", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  result = (CamKeypoints *) ((arg1)->set);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypoints, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_draw(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 = (int) 255 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint const *","draw", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","draw", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","draw", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  if (argc > 1) {
    ecode3 = SWIG_AsVal_int(argv[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw", 3, argv[1] ));
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (bool)((CamKeypoint const *)arg1)->draw(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoint_set_descriptor(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *arg1 = (CamKeypoint *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoint *","set_descriptor", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoint * >(argp1);
  {
    Check_Type(argv[0], T_ARRAY);
    arg3=RARRAY(argv[0])->len;
    if (arg3) {
      arg2=new int[arg3];
      for (int i=0;i!=arg3;i++) {
        VALUE inst = rb_ary_entry(argv[0], i);
        arg2[i]=NUM2INT(inst);
      }
    } else {
      arg2=NULL;
    }
  }
  result = (bool)(arg1)->set_descriptor((int const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  {
    if (arg2) delete[] arg2;
  }
  return vresult;
fail:
  {
    if (arg2) delete[] arg2;
  }
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamKeypoint_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamKeypoint_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamKeypoint);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamKeypoint(int argc, VALUE *argv, VALUE self) {
  CamKeypoint *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamKeypoint *)new CamKeypoint();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamKeypoint(CamKeypoint *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamKeypointsMatch;

SWIGINTERN VALUE
_wrap_CamKeypointsMatch_p1_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  CamKeypoint *arg2 = (CamKeypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","p1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamKeypoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoint *","p1", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamKeypoint * >(argp2);
  if (arg1) (arg1)->p1 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatch_p1_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  CamKeypoint *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","p1", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  result = (CamKeypoint *) ((arg1)->p1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypoint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatch_p2_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  CamKeypoint *arg2 = (CamKeypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","p2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamKeypoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoint *","p2", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamKeypoint * >(argp2);
  if (arg1) (arg1)->p2 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatch_p2_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  CamKeypoint *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","p2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  result = (CamKeypoint *) ((arg1)->p2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypoint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatch_mark_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","mark", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","mark", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->mark = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatch_mark_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","mark", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  result = (int) ((arg1)->mark);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatch_error_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","error", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","error", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->error = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatch_error_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *arg1 = (CamKeypointsMatch *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatch *","error", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatch * >(argp1);
  result = (int) ((arg1)->error);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamKeypointsMatch_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamKeypointsMatch_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamKeypointsMatch);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamKeypointsMatch(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatch *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamKeypointsMatch *)new CamKeypointsMatch();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamKeypointsMatch(CamKeypointsMatch *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamAffineTransform;

SWIGINTERN VALUE
_wrap_CamAffineTransform_m_set(int argc, VALUE *argv, VALUE self) {
  CamAffineTransform *arg1 = (CamAffineTransform *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamAffineTransform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamAffineTransform *","m", 1, self )); 
  }
  arg1 = reinterpret_cast< CamAffineTransform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "double [6]","m", 2, argv[0] )); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) arg1->m[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m""' of type '""double [6]""'");
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamAffineTransform_m_get(int argc, VALUE *argv, VALUE self) {
  CamAffineTransform *arg1 = (CamAffineTransform *) 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamAffineTransform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamAffineTransform *","m", 1, self )); 
  }
  arg1 = reinterpret_cast< CamAffineTransform * >(argp1);
  result = (double *)(double *) ((arg1)->m);
  {
    VALUE arr = rb_ary_new2(6);
    for (int i = 0; i < 6; i++) {
      rb_ary_push(arr, rb_float_new(result[i]));
    }
    vresult = arr;
  }
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamAffineTransform_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamAffineTransform_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamAffineTransform);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamAffineTransform(int argc, VALUE *argv, VALUE self) {
  CamAffineTransform *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamAffineTransform *)new CamAffineTransform();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamAffineTransform(CamAffineTransform *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamKeypointsMatches;

SWIGINTERN VALUE
_wrap_CamKeypointsMatches_nb_matches_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","nbMatches", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","nbMatches", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nbMatches = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_nb_matches_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","nbMatches", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  result = (int) ((arg1)->nbMatches);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_nb_outliers_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","nbOutliers", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","nbOutliers", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nbOutliers = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_nb_outliers_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","nbOutliers", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  result = (int) ((arg1)->nbOutliers);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_allocated_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","allocated", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","allocated", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->allocated = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_allocated_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","allocated", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  result = (int) ((arg1)->allocated);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_pairs_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  CamKeypointsMatch *arg2 = (CamKeypointsMatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","pairs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamKeypointsMatch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypointsMatch *","pairs", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamKeypointsMatch * >(argp2);
  if (arg1) (arg1)->pairs = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_pairs_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  CamKeypointsMatch *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","pairs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  result = (CamKeypointsMatch *) ((arg1)->pairs);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamKeypointsMatches_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamKeypointsMatches_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamKeypointsMatches);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamKeypointsMatches(int argc, VALUE *argv, VALUE self) {
  int arg1 = (int) 2048 ;
  CamKeypointsMatches *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 0) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  if (argc > 0) {
    ecode1 = SWIG_AsVal_int(argv[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamKeypointsMatches", 1, argv[0] ));
    } 
    arg1 = static_cast< int >(val1);
  }
  result = (CamKeypointsMatches *)new CamKeypointsMatches(arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamKeypointsMatches(CamKeypointsMatches *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CamKeypointsMatches_find_affine_transform(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int *arg2 = (int *) 0 ;
  CamAffineTransform result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg2 = &temp2;
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches const *","find_affine_transform", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  result = ((CamKeypointsMatches const *)arg1)->find_affine_transform(arg2);
  vresult = SWIG_NewPointerObj((new CamAffineTransform(static_cast< const CamAffineTransform& >(result))), SWIGTYPE_p_CamAffineTransform, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsTmpObj(res2)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsMatches_find_affine_transform2(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int *arg2 = (int *) 0 ;
  CamAffineTransform result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg2 = &temp2;
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches const *","find_affine_transform2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  result = ((CamKeypointsMatches const *)arg1)->find_affine_transform2(arg2);
  vresult = SWIG_NewPointerObj((new CamAffineTransform(static_cast< const CamAffineTransform& >(result))), SWIGTYPE_p_CamAffineTransform, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsTmpObj(res2)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamKeypointsMatches.[]

  call-seq:
    [](n) -> CamKeypointsMatch

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_CamKeypointsMatches___getitem__(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  int arg2 ;
  CamKeypointsMatch *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamKeypointsMatch *)CamKeypointsMatches___getitem__(arg1,arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypointsMatch, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamKeypointsMatches.each

  call-seq:
    each

Iterate thru each element in the CamKeypointsMatches.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_CamKeypointsMatches_each(int argc, VALUE *argv, VALUE self) {
  CamKeypointsMatches *arg1 = (CamKeypointsMatches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsMatches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsMatches *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsMatches * >(argp1);
  CamKeypointsMatches_each(arg1);
  return Qnil;
fail:
  return Qnil;
}


swig_class cCamKeypoints;

SWIGINTERN VALUE
_wrap_CamKeypoints_width_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","width", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->width = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_width_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (int) ((arg1)->width);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_height_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","height", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->height = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_height_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (int) ((arg1)->height);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_cx_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","cx", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","cx", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->cx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_cx_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","cx", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (int) ((arg1)->cx);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_cy_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","cy", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","cy", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->cy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_cy_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","cy", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (int) ((arg1)->cy);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_id_set(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","id", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->id = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_id_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (int) ((arg1)->id);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_allocated_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","allocated", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (int) ((arg1)->allocated);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_nb_points_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","nbPoints", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (int) ((arg1)->nbPoints);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_keypoint_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamKeypoint **result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","keypoint", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (CamKeypoint **) ((arg1)->keypoint);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_CamKeypoint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_bag_get(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamKeypoint *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","bag", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  result = (CamKeypoint *) ((arg1)->bag);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypoint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamKeypoints__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamKeypoints *)new CamKeypoints();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamKeypoints_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamKeypoints_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamKeypoints);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamKeypoints__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  CamKeypoints *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamKeypoints", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (CamKeypoints *)new CamKeypoints(arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CamKeypoints(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CamKeypoints__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CamKeypoints__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CamKeypoints.new", 
    "    CamKeypoints.new()\n"
    "    CamKeypoints.new(int nbPoints)\n");
  
  return Qnil;
}


SWIGINTERN void
free_CamKeypoints(CamKeypoints *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CamKeypoints_add(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamKeypoint *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","add", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoint &","add", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoint &","add", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoint * >(argp2);
  result = (bool)(arg1)->add(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamKeypoints.<<

  call-seq:
    <<(p) -> CamKeypoints

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_CamKeypoints___lshift__(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamKeypoint *arg2 = 0 ;
  CamKeypoints *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoint &","operator <<", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoint &","operator <<", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoint * >(argp2);
  {
    CamKeypoints &_result_ref = (arg1)->operator <<(*arg2);
    result = (CamKeypoints *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypoints, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_draw(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 = (int) 255 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints const *","draw", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","draw", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","draw", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  if (argc > 1) {
    ecode3 = SWIG_AsVal_int(argv[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","draw", 3, argv[1] ));
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (bool)((CamKeypoints const *)arg1)->draw(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_matching(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamKeypoints **arg2 = (CamKeypoints **) 0 ;
  int arg3 ;
  CamKeypointsMatches *arg4 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints const *","matching", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  {
    Check_Type(argv[0], T_ARRAY);
    arg3=RARRAY(argv[0])->len;
    if (arg3) {
      arg2=new CamKeypoints*[arg3];
      for (int i=0;i!=arg3;i++) {
        VALUE inst = rb_ary_entry(argv[0], i);
        void *argp;
        int res = SWIG_ConvertPtr(inst, &argp, SWIGTYPE_p_CamKeypoints,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "Array of CamKeypoints expected"); 
        }
        arg2[i]=reinterpret_cast< CamKeypoints * >(argp);
      }
    } else {
      arg2=NULL;
    }
  }
  res4 = SWIG_ConvertPtr(argv[1], &argp4, SWIGTYPE_p_CamKeypointsMatches,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "CamKeypointsMatches &","matching", 4, argv[1] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypointsMatches &","matching", 4, argv[1])); 
  }
  arg4 = reinterpret_cast< CamKeypointsMatches * >(argp4);
  result = (int)((CamKeypoints const *)arg1)->matching((CamKeypoints const **)arg2,arg3,*arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) delete[] arg2;
  }
  return vresult;
fail:
  {
    if (arg2) delete[] arg2;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_matching2(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamKeypoints *arg2 = 0 ;
  CamKeypointsMatches *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints const *","matching2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypoints,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoints const &","matching2", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypoints const &","matching2", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypoints * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamKeypointsMatches,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamKeypointsMatches &","matching2", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypointsMatches &","matching2", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamKeypointsMatches * >(argp3);
  result = (int)((CamKeypoints const *)arg1)->matching2((CamKeypoints const &)*arg2,*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_matchingKdTree(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  CamKeypointsKdTree *arg2 = 0 ;
  CamKeypointsMatches *arg3 = 0 ;
  int arg4 = (int) 100 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints const *","matchingKdTree", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamKeypointsKdTree,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypointsKdTree const &","matchingKdTree", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypointsKdTree const &","matchingKdTree", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamKeypointsKdTree * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamKeypointsMatches,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamKeypointsMatches &","matchingKdTree", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamKeypointsMatches &","matchingKdTree", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamKeypointsMatches * >(argp3);
  if (argc > 2) {
    ecode4 = SWIG_AsVal_int(argv[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","matchingKdTree", 4, argv[2] ));
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (int)((CamKeypoints const *)arg1)->matchingKdTree((CamKeypointsKdTree const &)*arg2,*arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_alloc(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","alloc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->alloc(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypoints_realloc(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","realloc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","realloc", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->realloc(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamKeypoints.[]

  call-seq:
    [](n) -> CamKeypoint

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_CamKeypoints___getitem__(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  int arg2 ;
  CamKeypoint *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamKeypoint *)CamKeypoints___getitem__(arg1,arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypoint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamKeypoints.each

  call-seq:
    each

Iterate thru each element in the CamKeypoints.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_CamKeypoints_each(int argc, VALUE *argv, VALUE self) {
  CamKeypoints *arg1 = (CamKeypoints *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypoints, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypoints *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypoints * >(argp1);
  CamKeypoints_each(arg1);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_camKeypointsSetParameters(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","camKeypointsSetParameters", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","camKeypointsSetParameters", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","camKeypointsSetParameters", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)camKeypointsSetParameters(arg1,arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cCamKeypointsKdTree;

SWIGINTERN VALUE
_wrap_CamKeypointsKdTree_root_set(int argc, VALUE *argv, VALUE self) {
  CamKeypointsKdTree *arg1 = (CamKeypointsKdTree *) 0 ;
  CamFPKdTreeNode *arg2 = (CamFPKdTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsKdTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsKdTree *","root", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsKdTree * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamFPKdTreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamFPKdTreeNode *","root", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamFPKdTreeNode * >(argp2);
  if (arg1) (arg1)->root = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsKdTree_root_get(int argc, VALUE *argv, VALUE self) {
  CamKeypointsKdTree *arg1 = (CamKeypointsKdTree *) 0 ;
  CamFPKdTreeNode *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsKdTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsKdTree *","root", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsKdTree * >(argp1);
  result = (CamFPKdTreeNode *) ((arg1)->root);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamFPKdTreeNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamKeypointsKdTree_compile(int argc, VALUE *argv, VALUE self) {
  CamKeypointsKdTree *arg1 = (CamKeypointsKdTree *) 0 ;
  CamKeypoints **arg2 = (CamKeypoints **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsKdTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsKdTree *","compile", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsKdTree * >(argp1);
  {
    Check_Type(argv[0], T_ARRAY);
    arg3=RARRAY(argv[0])->len;
    if (arg3) {
      arg2=new CamKeypoints*[arg3];
      for (int i=0;i!=arg3;i++) {
        VALUE inst = rb_ary_entry(argv[0], i);
        void *argp;
        int res = SWIG_ConvertPtr(inst, &argp, SWIGTYPE_p_CamKeypoints,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "Array of CamKeypoints expected"); 
        }
        arg2[i]=reinterpret_cast< CamKeypoints * >(argp);
      }
    } else {
      arg2=NULL;
    }
  }
  (arg1)->compile((CamKeypoints const **)arg2,arg3);
  {
    if (arg2) delete[] arg2;
  }
  return Qnil;
fail:
  {
    if (arg2) delete[] arg2;
  }
  return Qnil;
}



/*
  Document-method: Camellia::CamKeypointsKdTree.find

  call-seq:
    find(point, explore=100) -> CamKeypoint

Find an element in the class.
*/
SWIGINTERN VALUE
_wrap_CamKeypointsKdTree_find(int argc, VALUE *argv, VALUE self) {
  CamKeypointsKdTree *arg1 = (CamKeypointsKdTree *) 0 ;
  CamKeypoint *arg2 = (CamKeypoint *) 0 ;
  int arg3 = (int) 100 ;
  int *arg4 = (int *) NULL ;
  int *arg5 = (int *) NULL ;
  CamKeypoint *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg4 = &temp4;
  arg5 = &temp5;
  if ((argc < 1) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamKeypointsKdTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamKeypointsKdTree const *","find", 1, self )); 
  }
  arg1 = reinterpret_cast< CamKeypointsKdTree * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamKeypoint const *","find", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamKeypoint * >(argp2);
  if (argc > 1) {
    ecode3 = SWIG_AsVal_int(argv[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","find", 3, argv[1] ));
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (CamKeypoint *)((CamKeypointsKdTree const *)arg1)->find((CamKeypoint const *)arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamKeypoint, 0 |  0 );
  if (SWIG_IsTmpObj(res4)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamKeypointsKdTree_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamKeypointsKdTree_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamKeypointsKdTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamKeypointsKdTree(int argc, VALUE *argv, VALUE self) {
  CamKeypoints **arg1 = (CamKeypoints **) NULL ;
  int arg2 = (int) 0 ;
  CamKeypointsKdTree *result = 0 ;
  
  if ((argc < 0) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  if (argc > 0) {
    {
      Check_Type(argv[0], T_ARRAY);
      arg2=RARRAY(argv[0])->len;
      if (arg2) {
        arg1=new CamKeypoints*[arg2];
        for (int i=0;i!=arg2;i++) {
          VALUE inst = rb_ary_entry(argv[0], i);
          void *argp;
          int res = SWIG_ConvertPtr(inst, &argp, SWIGTYPE_p_CamKeypoints,  0 );
          if (!SWIG_IsOK(res)) {
            SWIG_exception_fail(SWIG_ArgError(res), "Array of CamKeypoints expected"); 
          }
          arg1[i]=reinterpret_cast< CamKeypoints * >(argp);
        }
      } else {
        arg1=NULL;
      }
    }
  }
  result = (CamKeypointsKdTree *)new CamKeypointsKdTree((CamKeypoints const **)arg1,arg2);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  {
    if (arg1) delete[] arg1;
  }
  return self;
fail:
  {
    if (arg1) delete[] arg1;
  }
  return Qnil;
}


SWIGINTERN void
free_CamKeypointsKdTree(CamKeypointsKdTree *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_cam_set_viewer(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","camSetImageViewer", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (int)camSetImageViewer(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


swig_class cCamBitmapFont;

SWIGINTERN VALUE
_wrap_CamBitmapFont_first_char_set(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","first_char", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","first_char", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->first_char = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_first_char_get(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","first_char", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  result = (int) ((arg1)->first_char);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_nb_chars_set(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","nb_chars", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","nb_chars", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nb_chars = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_nb_chars_get(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","nb_chars", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  result = (int) ((arg1)->nb_chars);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_height_set(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","height", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->height = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_height_get(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  result = (int) ((arg1)->height);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_masks_set(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  CamRLEImage *arg2 = (CamRLEImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","masks", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamRLEImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage *","masks", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  if (arg1) (arg1)->masks = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_masks_get(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","masks", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  result = (CamRLEImage *) ((arg1)->masks);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_letters_set(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  CamImage *arg2 = (CamImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","letters", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CamImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage *","letters", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  if (arg1) (arg1)->letters = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBitmapFont_letters_get(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  CamImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","letters", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  result = (CamImage *) ((arg1)->letters);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamImage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamBitmapFont__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamBitmapFont *)new CamBitmapFont();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamBitmapFont_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamBitmapFont_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamBitmapFont);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamBitmapFont__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  CamBitmapFont *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","CamBitmapFont", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (CamBitmapFont *)new CamBitmapFont((char const *)arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CamBitmapFont(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CamBitmapFont__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CamBitmapFont__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CamBitmapFont.new", 
    "    CamBitmapFont.new()\n"
    "    CamBitmapFont.new(char const *filename)\n");
  
  return Qnil;
}


SWIGINTERN void
free_CamBitmapFont(CamBitmapFont *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CamBitmapFont_load(int argc, VALUE *argv, VALUE self) {
  CamBitmapFont *arg1 = (CamBitmapFont *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBitmapFont, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBitmapFont *","load", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBitmapFont * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","load", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->load((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_cam_rgb(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","camRGB", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","camRGB", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","camRGB", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)camRGB(arg1,arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_camRGBA(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","camRGBA", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","camRGBA", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","camRGBA", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","camRGBA", 4, argv[3] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)camRGBA(arg1,arg2,arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cCamCapture2;

SWIGINTERN VALUE
_wrap_CamCapture2_capture(int argc, VALUE *argv, VALUE self) {
  CamCapture *arg1 = (CamCapture *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamCapture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamCapture *","capture", 1, self )); 
  }
  arg1 = reinterpret_cast< CamCapture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","capture", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","capture", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)(arg1)->capture(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamCapture2_ready(int argc, VALUE *argv, VALUE self) {
  CamCapture *arg1 = (CamCapture *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamCapture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamCapture *","ready", 1, self )); 
  }
  arg1 = reinterpret_cast< CamCapture * >(argp1);
  result = (bool)(arg1)->ready();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamCapture2_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamCapture2_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamCapture);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamCapture2(int argc, VALUE *argv, VALUE self) {
  int arg1 = (int) 0 ;
  CamCapture *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 0) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  if (argc > 0) {
    ecode1 = SWIG_AsVal_int(argv[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamCapture", 1, argv[0] ));
    } 
    arg1 = static_cast< int >(val1);
  }
  result = (CamCapture *)new CamCapture(arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamCapture(CamCapture *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamTable;


/*
  Document-method: Camellia::CamTable.size

  call-seq:
    size -> int

Size or Length of the CamTable.
*/

/*
  Document-method: Camellia::CamTable.size=

  call-seq:
    size=(x) -> int

Size or Length of the CamTable.
*/
SWIGINTERN VALUE
_wrap_CamTable_size_set(int argc, VALUE *argv, VALUE self) {
  CamTable *arg1 = (CamTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTable *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","size", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->size = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamTable_size_get(int argc, VALUE *argv, VALUE self) {
  CamTable *arg1 = (CamTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTable *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTable * >(argp1);
  result = (int) ((arg1)->size);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamTable__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  CamTable *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamTable", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (CamTable *)new CamTable(arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamTable_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamTable_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamTable);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamTable__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamTable *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamTable *)new CamTable();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CamTable(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CamTable__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CamTable__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CamTable.new", 
    "    CamTable.new(int s)\n"
    "    CamTable.new()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamTable_set(int argc, VALUE *argv, VALUE self) {
  CamTable *arg1 = (CamTable *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTable *","set", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTable * >(argp1);
  {
    Check_Type(argv[0], T_ARRAY);
    arg3=RARRAY(argv[0])->len;
    if (arg3) {
      arg2=new int[arg3];
      for (int i=0;i!=arg3;i++) {
        VALUE inst = rb_ary_entry(argv[0], i);
        arg2[i]=NUM2INT(inst);
      }
    } else {
      arg2=NULL;
    }
  }
  result = (bool)(arg1)->set((int const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  {
    if (arg2) delete[] arg2;
  }
  return vresult;
fail:
  {
    if (arg2) delete[] arg2;
  }
  return Qnil;
}



/*
  Document-method: Camellia::CamTable.[]

  call-seq:
    [](n) -> int

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_CamTable___getitem__(int argc, VALUE *argv, VALUE self) {
  CamTable *arg1 = (CamTable *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTable *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)CamTable___getitem__(arg1,arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamTable.[]=

  call-seq:
    []=(n, val)

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_CamTable___setitem__(int argc, VALUE *argv, VALUE self) {
  CamTable *arg1 = (CamTable *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTable *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  CamTable___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamTable.each

  call-seq:
    each

Iterate thru each element in the CamTable.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_CamTable_each(int argc, VALUE *argv, VALUE self) {
  CamTable *arg1 = (CamTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTable *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTable * >(argp1);
  CamTable_each(arg1);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamTable(CamTable *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamRLEImage;

SWIGINTERN VALUE
_wrap_CamRLEImage_id_set(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","id", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->id = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_id_get(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (int) ((arg1)->id);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_height_get(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (int) ((arg1)->height);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_width_get(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (int) ((arg1)->width);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_nb_runs_get(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","nbRuns", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (int) ((arg1)->nbRuns);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_allocated_get(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","allocated", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (int) ((arg1)->allocated);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamRLEImage__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamRLEImage *)new CamRLEImage();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CamRLEImage__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  CamRLEImage *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CamRLEImage", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (CamRLEImage *)new CamRLEImage(arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamRLEImage_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamRLEImage_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamRLEImage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamRLEImage__SWIG_2(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const &","CamRLEImage", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage const &","CamRLEImage", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (CamRLEImage *)new CamRLEImage((CamRLEImage const &)*arg1);DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CamRLEImage(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CamRLEImage__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CamRLEImage__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CamRLEImage__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CamRLEImage.new", 
    "    CamRLEImage.new()\n"
    "    CamRLEImage.new(int nbruns)\n"
    "    CamRLEImage.new(CamRLEImage const &image)\n");
  
  return Qnil;
}


SWIGINTERN void
free_CamRLEImage(CamRLEImage *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}


/*
  Document-method: Camellia::CamRLEImage.clone

  call-seq:
    clone -> CamRLEImage

Create a duplicate of the class.
*/
SWIGINTERN VALUE
_wrap_CamRLEImage_clone(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","clone", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (CamRLEImage *)((CamRLEImage const *)arg1)->clone();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_alloc(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","alloc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","alloc", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->alloc(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_realloc(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","realloc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","realloc", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->realloc(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_encode(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","encode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","encode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","encode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)(arg1)->encode((CamImage const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_encode_lut(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","encode_lut", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","encode_lut", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","encode_lut", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","encode_lut", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","encode_lut", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)(arg1)->encode_lut((CamImage const &)*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_encode_threshold(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","encode_threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","encode_threshold", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","encode_threshold", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","encode_threshold", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->encode_threshold((CamImage const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_encode_threshold_inv(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","encode_threshold_inv", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","encode_threshold_inv", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","encode_threshold_inv", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","encode_threshold_inv", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->encode_threshold_inv((CamImage const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_encode_color(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","encode_color", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage const &","encode_color", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage const &","encode_color", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","encode_color", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","encode_color", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)(arg1)->encode_color((CamImage const &)*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_labelingN_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamBlobs *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","labeling", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (CamBlobs *)(arg1)->labeling();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamBlobs, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_labelingN_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamBlobs *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","labeling", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamBlobs,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamBlobs &","labeling", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamBlobs &","labeling", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamBlobs * >(argp2);
  result = (bool)(arg1)->labeling(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamRLEImage_labelingN___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamRLEImage_labelingN_____SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamBlobs, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamRLEImage_labelingN_____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "CamRLEImage.labeling!", 
    "    bool CamRLEImage.labeling!()\n"
    "    bool CamRLEImage.labeling!(CamBlobs &results)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_blob_analysis(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamBlobs *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","blob_analysis", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamBlobs,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamBlobs &","blob_analysis", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamBlobs &","blob_analysis", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamBlobs * >(argp2);
  result = (bool)((CamRLEImage const *)arg1)->blob_analysis(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_apply_lutN___(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamTable *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","apply_lut", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamTable const &","apply_lut", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","apply_lut", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamTable * >(argp2);
  result = (bool)(arg1)->apply_lut((CamTable const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_apply_lut(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","apply_lut", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","apply_lut", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","apply_lut", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","apply_lut", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","apply_lut", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)((CamRLEImage const *)arg1)->apply_lut(*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_decode__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","decode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","decode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","decode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamRLEImage const *)arg1)->decode(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_decode__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","decode", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","decode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","decode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","decode", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","decode", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)((CamRLEImage const *)arg1)->decode(*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamRLEImage_decode(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamRLEImage_decode__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamTable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CamRLEImage_decode__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CamRLEImage.decode", 
    "    bool CamRLEImage.decode(CamImage &dest)\n"
    "    bool CamRLEImage.decode(CamImage &dest, CamTable const &LUT)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_decode_blobs__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","decode_blobs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","decode_blobs", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","decode_blobs", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  result = (bool)((CamRLEImage const *)arg1)->decode_blobs(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_decode_blobs__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamImage *arg2 = 0 ;
  CamTable *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","decode_blobs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamImage &","decode_blobs", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamImage &","decode_blobs", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamImage * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CamTable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CamTable const &","decode_blobs", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamTable const &","decode_blobs", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CamTable * >(argp3);
  result = (bool)((CamRLEImage const *)arg1)->decode_blobs(*arg2,(CamTable const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamRLEImage_decode_blobs(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamRLEImage_decode_blobs__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CamTable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CamRLEImage_decode_blobs__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CamRLEImage.decode_blobs", 
    "    bool CamRLEImage.decode_blobs(CamImage &dest)\n"
    "    bool CamRLEImage.decode_blobs(CamImage &dest, CamTable const &LUT)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_inverseN___(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage *","inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (bool)(arg1)->inverse();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_erode_cross__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","erode_cross", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","erode_cross", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","erode_cross", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  result = (bool)((CamRLEImage const *)arg1)->erode_cross(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_erode_cross__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","erode_cross", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (CamRLEImage *)((CamRLEImage const *)arg1)->erode_cross();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamRLEImage_erode_cross(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamRLEImage_erode_cross__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamRLEImage_erode_cross__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "erode_cross.new", 
    "    erode_cross.new(CamRLEImage &dest)\n"
    "    erode_cross.new()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_erode_3x3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","erode_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","erode_3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","erode_3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  result = (bool)((CamRLEImage const *)arg1)->erode_3x3(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_erode_3x3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","erode_3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (CamRLEImage *)((CamRLEImage const *)arg1)->erode_3x3();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamRLEImage_erode_3x3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamRLEImage_erode_3x3__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamRLEImage_erode_3x3__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "erode_3x3.new", 
    "    erode_3x3.new(CamRLEImage &dest)\n"
    "    erode_3x3.new()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_erode_3x2__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","erode_3x2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamRLEImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamRLEImage &","erode_3x2", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamRLEImage &","erode_3x2", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamRLEImage * >(argp2);
  result = (bool)((CamRLEImage const *)arg1)->erode_3x2(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamRLEImage_erode_3x2__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CamRLEImage *arg1 = (CamRLEImage *) 0 ;
  CamRLEImage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamRLEImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamRLEImage const *","erode_3x2", 1, self )); 
  }
  arg1 = reinterpret_cast< CamRLEImage * >(argp1);
  result = (CamRLEImage *)((CamRLEImage const *)arg1)->erode_3x2();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamRLEImage, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CamRLEImage_erode_3x2(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CamRLEImage_erode_3x2__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamRLEImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CamRLEImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CamRLEImage_erode_3x2__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "erode_3x2.new", 
    "    erode_3x2.new(CamRLEImage &dest)\n"
    "    erode_3x2.new()\n");
  
  return Qnil;
}


swig_class cCamBlobInfo;

SWIGINTERN VALUE
_wrap_CamBlobInfo_id_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->id);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_left_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","left", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->left);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_top_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","top", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->top);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_width_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->width);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_height_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","height", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->height);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_surface_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","surface", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->surface);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_cx_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","cx", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->cx);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_cy_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","cy", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->cy);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_value_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->value);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_min_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","min", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->min);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_max_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","max", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (int) ((arg1)->max);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamBlobInfo_misc_get(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *arg1 = (CamBlobInfo *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobInfo *","misc", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobInfo * >(argp1);
  result = (void *) ((arg1)->misc);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamBlobInfo_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamBlobInfo_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamBlobInfo);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamBlobInfo(int argc, VALUE *argv, VALUE self) {
  CamBlobInfo *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamBlobInfo *)new CamBlobInfo();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamBlobInfo(CamBlobInfo *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamBlobs;

SWIGINTERN VALUE
_wrap_CamBlobs_nb_blobs_get(int argc, VALUE *argv, VALUE self) {
  CamBlobs *arg1 = (CamBlobs *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobs *","nbBlobs", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobs * >(argp1);
  result = (int) ((arg1)->nbBlobs);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamBlobs_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamBlobs_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamBlobs);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamBlobs(int argc, VALUE *argv, VALUE self) {
  CamBlobs *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamBlobs *)new CamBlobs();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamBlobs.[]

  call-seq:
    [](n) -> CamBlobInfo

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_CamBlobs___getitem__(int argc, VALUE *argv, VALUE self) {
  CamBlobs *arg1 = (CamBlobs *) 0 ;
  int arg2 ;
  CamBlobInfo result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobs *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobs * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = CamBlobs___getitem__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CamBlobInfo(static_cast< const CamBlobInfo& >(result))), SWIGTYPE_p_CamBlobInfo, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamBlobs.each

  call-seq:
    each

Iterate thru each element in the CamBlobs.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_CamBlobs_each(int argc, VALUE *argv, VALUE self) {
  CamBlobs *arg1 = (CamBlobs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamBlobs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamBlobs *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< CamBlobs * >(argp1);
  CamBlobs_each(arg1);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamBlobs(CamBlobs *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

swig_class cCamTableOfBasins;

SWIGINTERN VALUE
_wrap_CamTableOfBasins_nbBasins_get(int argc, VALUE *argv, VALUE self) {
  CamTableOfBasins *arg1 = (CamTableOfBasins *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTableOfBasins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTableOfBasins *","nbBasins", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTableOfBasins * >(argp1);
  result = (int) ((arg1)->nbBasins);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CamTableOfBasins_get_rid_of(int argc, VALUE *argv, VALUE self) {
  CamTableOfBasins *arg1 = (CamTableOfBasins *) 0 ;
  CamBasin *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTableOfBasins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTableOfBasins *","get_rid_of", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTableOfBasins * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CamBasin,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CamBasin &","get_rid_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CamBasin &","get_rid_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< CamBasin * >(argp2);
  (arg1)->get_rid_of(*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamTableOfBasins.[]

  call-seq:
    [](n) -> CamBasin

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_CamTableOfBasins___getitem__(int argc, VALUE *argv, VALUE self) {
  CamTableOfBasins *arg1 = (CamTableOfBasins *) 0 ;
  int arg2 ;
  CamBasin *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTableOfBasins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTableOfBasins *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTableOfBasins * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (CamBasin *)CamTableOfBasins___getitem__(arg1,arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CamBasin, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Camellia::CamTableOfBasins.each

  call-seq:
    each

Iterate thru each element in the CamTableOfBasins.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_CamTableOfBasins_each(int argc, VALUE *argv, VALUE self) {
  CamTableOfBasins *arg1 = (CamTableOfBasins *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CamTableOfBasins, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CamTableOfBasins *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< CamTableOfBasins * >(argp1);
  CamTableOfBasins_each(arg1);
  return Qnil;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CamTableOfBasins_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CamTableOfBasins_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CamTableOfBasins);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CamTableOfBasins(int argc, VALUE *argv, VALUE self) {
  CamTableOfBasins *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CamTableOfBasins *)new CamTableOfBasins();DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_CamTableOfBasins(CamTableOfBasins *arg1) {
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CamAffineTransform = {"_p_CamAffineTransform", "CamAffineTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamBasin = {"_p_CamBasin", "CamBasin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamBitmapFont = {"_p_CamBitmapFont", "CamBitmapFont *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamBlobInfo = {"_p_CamBlobInfo", "CamBlobInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamBlobs = {"_p_CamBlobs", "CamBlobs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamCapture = {"_p_CamCapture", "CamCapture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamFPKdTreeNode = {"_p_CamFPKdTreeNode", "CamFPKdTreeNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamImage = {"_p_CamImage", "CamImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamKeypoint = {"_p_CamKeypoint", "CamKeypoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamKeypoints = {"_p_CamKeypoints", "CamKeypoints *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamKeypointsKdTree = {"_p_CamKeypointsKdTree", "CamKeypointsKdTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamKeypointsMatch = {"_p_CamKeypointsMatch", "CamKeypointsMatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamKeypointsMatches = {"_p_CamKeypointsMatches", "CamKeypointsMatches *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamLinearFilterKernel = {"_p_CamLinearFilterKernel", "CamLinearFilterKernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamMeasuresResults = {"_p_CamMeasuresResults", "CamMeasuresResults *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamMorphoMathsKernel = {"_p_CamMorphoMathsKernel", "CamMorphoMathsKernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamPoint = {"_p_CamPoint", "CamPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamRLEImage = {"_p_CamRLEImage", "CamRLEImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamROI = {"_p_CamROI", "CamROI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamRun = {"_p_CamRun", "CamRun *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamSepFilterKernel = {"_p_CamSepFilterKernel", "CamSepFilterKernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamTable = {"_p_CamTable", "CamTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CamTableOfBasins = {"_p_CamTableOfBasins", "CamTableOfBasins *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_CamKeypoint = {"_p_p_CamKeypoint", "CamKeypoint **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_CamKeypoints = {"_p_p_CamKeypoints", "CamKeypoints **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CamAffineTransform,
  &_swigt__p_CamBasin,
  &_swigt__p_CamBitmapFont,
  &_swigt__p_CamBlobInfo,
  &_swigt__p_CamBlobs,
  &_swigt__p_CamCapture,
  &_swigt__p_CamFPKdTreeNode,
  &_swigt__p_CamImage,
  &_swigt__p_CamKeypoint,
  &_swigt__p_CamKeypoints,
  &_swigt__p_CamKeypointsKdTree,
  &_swigt__p_CamKeypointsMatch,
  &_swigt__p_CamKeypointsMatches,
  &_swigt__p_CamLinearFilterKernel,
  &_swigt__p_CamMeasuresResults,
  &_swigt__p_CamMorphoMathsKernel,
  &_swigt__p_CamPoint,
  &_swigt__p_CamRLEImage,
  &_swigt__p_CamROI,
  &_swigt__p_CamRun,
  &_swigt__p_CamSepFilterKernel,
  &_swigt__p_CamTable,
  &_swigt__p_CamTableOfBasins,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p_CamKeypoint,
  &_swigt__p_p_CamKeypoints,
  &_swigt__p_p_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_CamAffineTransform[] = {  {&_swigt__p_CamAffineTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamBasin[] = {  {&_swigt__p_CamBasin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamBitmapFont[] = {  {&_swigt__p_CamBitmapFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamBlobInfo[] = {  {&_swigt__p_CamBlobInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamBlobs[] = {  {&_swigt__p_CamBlobs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamCapture[] = {  {&_swigt__p_CamCapture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamFPKdTreeNode[] = {  {&_swigt__p_CamFPKdTreeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamImage[] = {  {&_swigt__p_CamImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamKeypoint[] = {  {&_swigt__p_CamKeypoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamKeypoints[] = {  {&_swigt__p_CamKeypoints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamKeypointsKdTree[] = {  {&_swigt__p_CamKeypointsKdTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamKeypointsMatch[] = {  {&_swigt__p_CamKeypointsMatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamKeypointsMatches[] = {  {&_swigt__p_CamKeypointsMatches, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamLinearFilterKernel[] = {  {&_swigt__p_CamLinearFilterKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamMeasuresResults[] = {  {&_swigt__p_CamMeasuresResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamMorphoMathsKernel[] = {  {&_swigt__p_CamMorphoMathsKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamPoint[] = {  {&_swigt__p_CamPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamRLEImage[] = {  {&_swigt__p_CamRLEImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamROI[] = {  {&_swigt__p_CamROI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamRun[] = {  {&_swigt__p_CamRun, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamSepFilterKernel[] = {  {&_swigt__p_CamSepFilterKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamTable[] = {  {&_swigt__p_CamTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamTableOfBasins[] = {  {&_swigt__p_CamTableOfBasins, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CamKeypoint[] = {  {&_swigt__p_p_CamKeypoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CamKeypoints[] = {  {&_swigt__p_p_CamKeypoints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CamAffineTransform,
  _swigc__p_CamBasin,
  _swigc__p_CamBitmapFont,
  _swigc__p_CamBlobInfo,
  _swigc__p_CamBlobs,
  _swigc__p_CamCapture,
  _swigc__p_CamFPKdTreeNode,
  _swigc__p_CamImage,
  _swigc__p_CamKeypoint,
  _swigc__p_CamKeypoints,
  _swigc__p_CamKeypointsKdTree,
  _swigc__p_CamKeypointsMatch,
  _swigc__p_CamKeypointsMatches,
  _swigc__p_CamLinearFilterKernel,
  _swigc__p_CamMeasuresResults,
  _swigc__p_CamMorphoMathsKernel,
  _swigc__p_CamPoint,
  _swigc__p_CamRLEImage,
  _swigc__p_CamROI,
  _swigc__p_CamRun,
  _swigc__p_CamSepFilterKernel,
  _swigc__p_CamTable,
  _swigc__p_CamTableOfBasins,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p_CamKeypoint,
  _swigc__p_p_CamKeypoints,
  _swigc__p_p_char,
  _swigc__p_unsigned_char,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_camellia(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mCamellia = rb_define_module("Camellia");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_const(mCamellia, "CAM_VERSION", SWIG_FromCharPtr("2.7.0 : Bastille ($Rev: 270 $)"));
  rb_define_const(mCamellia, "CAM_MAX_SCANLINE", SWIG_From_int(static_cast< int >(1280)));
  rb_define_const(mCamellia, "CAM_MAX_FRAME_HEIGHT", SWIG_From_int(static_cast< int >(1024)));
  rb_define_const(mCamellia, "CAM_DEPTH_SIGN", SWIG_From_int(static_cast< int >(0x80000000)));
  rb_define_const(mCamellia, "CAM_DEPTH_MASK", SWIG_From_int(static_cast< int >(0x7FFFFFFF)));
  rb_define_const(mCamellia, "CAM_DEPTH_1U", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_DEPTH_8U", SWIG_From_int(static_cast< int >(8)));
  rb_define_const(mCamellia, "CAM_DEPTH_10U", SWIG_From_int(static_cast< int >(10)));
  rb_define_const(mCamellia, "CAM_DEPTH_12U", SWIG_From_int(static_cast< int >(12)));
  rb_define_const(mCamellia, "CAM_DEPTH_16U", SWIG_From_int(static_cast< int >(16)));
  rb_define_const(mCamellia, "CAM_DEPTH_32U", SWIG_From_int(static_cast< int >(32)));
  rb_define_const(mCamellia, "CAM_DEPTH_8S", SWIG_From_int(static_cast< int >((0x80000000|8))));
  rb_define_const(mCamellia, "CAM_DEPTH_10S", SWIG_From_int(static_cast< int >((0x80000000|10))));
  rb_define_const(mCamellia, "CAM_DEPTH_12S", SWIG_From_int(static_cast< int >((0x80000000|12))));
  rb_define_const(mCamellia, "CAM_DEPTH_16S", SWIG_From_int(static_cast< int >((0x80000000|16))));
  rb_define_const(mCamellia, "CAM_DEPTH_32S", SWIG_From_int(static_cast< int >((0x80000000|32))));
  rb_define_const(mCamellia, "CAM_DATA_ORDER_PIXEL", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_DATA_ORDER_PLANE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_ORIGIN_TL", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_ALIGN_4BYTES", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_ALIGN_8BYTES", SWIG_From_int(static_cast< int >(8)));
  rb_define_const(mCamellia, "CAM_ALIGN_16BYTES", SWIG_From_int(static_cast< int >(16)));
  rb_define_const(mCamellia, "CAM_ALIGN_32BYTES", SWIG_From_int(static_cast< int >(32)));
  rb_define_const(mCamellia, "CAM_ALIGN_DWORD", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_ALIGN_QWORD", SWIG_From_int(static_cast< int >(8)));
  rb_define_const(mCamellia, "CAM_BORDER_CONSTANT", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_BORDER_REPLICATE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_SIDE_TOP_INDEX", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_SIDE_BOTTOM_INDEX", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_SIDE_LEFT_INDEX", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_SIDE_RIGHT_INDEX", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_SIDE_TOP", SWIG_From_int(static_cast< int >((1 << 0))));
  rb_define_const(mCamellia, "CAM_SIDE_BOTTOM", SWIG_From_int(static_cast< int >((1 << 1))));
  rb_define_const(mCamellia, "CAM_SIDE_LEFT", SWIG_From_int(static_cast< int >((1 << 2))));
  rb_define_const(mCamellia, "CAM_SIDE_RIGHT", SWIG_From_int(static_cast< int >((1 << 3))));
  rb_define_const(mCamellia, "CAM_SIDE_ALL", SWIG_From_int(static_cast< int >(((1 << 3)|(1 << 0)|(1 << 2)|(1 << 1)))));
  rb_define_const(mCamellia, "CAM_HEADER_ONLY", SWIG_From_int(static_cast< int >((1 << 29))));
  
  cCamROI.klass = rb_define_class_under(mCamellia, "CamROI", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamROI, (void *) &cCamROI);
  rb_define_alloc_func(cCamROI.klass, _wrap_CamROI_allocate);
  rb_define_method(cCamROI.klass, "initialize", VALUEFUNC(_wrap_new_CamROI), -1);
  rb_define_method(cCamROI.klass, "coi=", VALUEFUNC(_wrap_CamROI_coi_set), -1);
  rb_define_method(cCamROI.klass, "coi", VALUEFUNC(_wrap_CamROI_coi_get), -1);
  rb_define_method(cCamROI.klass, "xOffset=", VALUEFUNC(_wrap_CamROI_xOffset_set), -1);
  rb_define_method(cCamROI.klass, "xOffset", VALUEFUNC(_wrap_CamROI_xOffset_get), -1);
  rb_define_method(cCamROI.klass, "yOffset=", VALUEFUNC(_wrap_CamROI_yOffset_set), -1);
  rb_define_method(cCamROI.klass, "yOffset", VALUEFUNC(_wrap_CamROI_yOffset_get), -1);
  rb_define_method(cCamROI.klass, "width=", VALUEFUNC(_wrap_CamROI_width_set), -1);
  rb_define_method(cCamROI.klass, "width", VALUEFUNC(_wrap_CamROI_width_get), -1);
  rb_define_method(cCamROI.klass, "height=", VALUEFUNC(_wrap_CamROI_height_set), -1);
  rb_define_method(cCamROI.klass, "height", VALUEFUNC(_wrap_CamROI_height_get), -1);
  rb_define_method(cCamROI.klass, "intersect", VALUEFUNC(_wrap_CamROI_intersect), -1);
  rb_define_method(cCamROI.klass, "clip", VALUEFUNC(_wrap_CamROI_clip), -1);
  rb_define_method(cCamROI.klass, "reduce", VALUEFUNC(_wrap_CamROI_reduce), -1);
  rb_define_method(cCamROI.klass, "enlarge", VALUEFUNC(_wrap_CamROI_enlarge), -1);
  cCamROI.mark = 0;
  cCamROI.destroy = (void (*)(void *)) free_CamROI;
  cCamROI.trackObjects = 1;
  
  cCamPoint.klass = rb_define_class_under(mCamellia, "CamPoint", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamPoint, (void *) &cCamPoint);
  rb_define_alloc_func(cCamPoint.klass, _wrap_CamPoint_allocate);
  rb_define_method(cCamPoint.klass, "initialize", VALUEFUNC(_wrap_new_CamPoint), -1);
  rb_define_method(cCamPoint.klass, "x=", VALUEFUNC(_wrap_CamPoint_x_set), -1);
  rb_define_method(cCamPoint.klass, "x", VALUEFUNC(_wrap_CamPoint_x_get), -1);
  rb_define_method(cCamPoint.klass, "y=", VALUEFUNC(_wrap_CamPoint_y_set), -1);
  rb_define_method(cCamPoint.klass, "y", VALUEFUNC(_wrap_CamPoint_y_get), -1);
  rb_define_method(cCamPoint.klass, "apply_affine_transform", VALUEFUNC(_wrap_CamPoint_apply_affine_transform), -1);
  cCamPoint.mark = 0;
  cCamPoint.destroy = (void (*)(void *)) free_CamPoint;
  cCamPoint.trackObjects = 1;
  rb_define_const(mCamellia, "CAM_POINT", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_CROSS", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_CIRCLE", SWIG_From_int(static_cast< int >(4)));
  
  cCamImage.klass = rb_define_class_under(mCamellia, "CamImage", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamImage, (void *) &cCamImage);
  rb_define_alloc_func(cCamImage.klass, _wrap_CamImage_allocate);
  rb_define_method(cCamImage.klass, "initialize", VALUEFUNC(_wrap_new_CamImage), -1);
  rb_define_method(cCamImage.klass, "nSize", VALUEFUNC(_wrap_CamImage_nSize_get), -1);
  rb_define_method(cCamImage.klass, "id", VALUEFUNC(_wrap_CamImage_id_get), -1);
  rb_define_method(cCamImage.klass, "nChannels", VALUEFUNC(_wrap_CamImage_nChannels_get), -1);
  rb_define_method(cCamImage.klass, "alphaChannel", VALUEFUNC(_wrap_CamImage_alphaChannel_get), -1);
  rb_define_method(cCamImage.klass, "depth", VALUEFUNC(_wrap_CamImage_depth_get), -1);
  rb_define_method(cCamImage.klass, "colorModel", VALUEFUNC(_wrap_CamImage_colorModel_get), -1);
  rb_define_method(cCamImage.klass, "channelSeq", VALUEFUNC(_wrap_CamImage_channelSeq_get), -1);
  rb_define_method(cCamImage.klass, "dataOrder", VALUEFUNC(_wrap_CamImage_dataOrder_get), -1);
  rb_define_method(cCamImage.klass, "origin", VALUEFUNC(_wrap_CamImage_origin_get), -1);
  rb_define_method(cCamImage.klass, "align", VALUEFUNC(_wrap_CamImage_align_get), -1);
  rb_define_method(cCamImage.klass, "width", VALUEFUNC(_wrap_CamImage_width_get), -1);
  rb_define_method(cCamImage.klass, "height", VALUEFUNC(_wrap_CamImage_height_get), -1);
  rb_define_method(cCamImage.klass, "roi=", VALUEFUNC(_wrap_CamImage_roi_set), -1);
  rb_define_method(cCamImage.klass, "roi", VALUEFUNC(_wrap_CamImage_roi_get), -1);
  rb_define_method(cCamImage.klass, "mask", VALUEFUNC(_wrap_CamImage_mask_get), -1);
  rb_define_method(cCamImage.klass, "imageId", VALUEFUNC(_wrap_CamImage_imageId_get), -1);
  rb_define_method(cCamImage.klass, "misc", VALUEFUNC(_wrap_CamImage_misc_get), -1);
  rb_define_method(cCamImage.klass, "imageSize", VALUEFUNC(_wrap_CamImage_imageSize_get), -1);
  rb_define_method(cCamImage.klass, "imageData", VALUEFUNC(_wrap_CamImage_imageData_get), -1);
  rb_define_method(cCamImage.klass, "widthStep", VALUEFUNC(_wrap_CamImage_widthStep_get), -1);
  rb_define_method(cCamImage.klass, "borderMode", VALUEFUNC(_wrap_CamImage_borderMode_get), -1);
  rb_define_method(cCamImage.klass, "borderConst", VALUEFUNC(_wrap_CamImage_borderConst_get), -1);
  rb_define_method(cCamImage.klass, "imageDataOrigin", VALUEFUNC(_wrap_CamImage_imageDataOrigin_get), -1);
  rb_define_method(cCamImage.klass, "clone", VALUEFUNC(_wrap_CamImage_clone), -1);
  rb_define_alias(cCamImage.klass, "dup", "clone");
  rb_define_method(cCamImage.klass, "copy", VALUEFUNC(_wrap_CamImage_copy), -1);
  rb_define_alias(cCamImage.klass, "copy_to", "copy");
  rb_define_method(cCamImage.klass, "allocated?", VALUEFUNC(_wrap_CamImage_allocatedq___), -1);
  rb_define_method(cCamImage.klass, "alloc", VALUEFUNC(_wrap_CamImage_alloc), -1);
  rb_define_method(cCamImage.klass, "fill_header", VALUEFUNC(_wrap_CamImage_fill_header), -1);
  rb_define_method(cCamImage.klass, "deallocate", VALUEFUNC(_wrap_CamImage_deallocate), -1);
  rb_define_method(cCamImage.klass, "free", VALUEFUNC(_wrap_CamImage_free), -1);
  rb_define_method(cCamImage.klass, "alloc_rgb", VALUEFUNC(_wrap_CamImage_alloc_rgb), -1);
  rb_define_method(cCamImage.klass, "alloc_rgba", VALUEFUNC(_wrap_CamImage_alloc_rgba), -1);
  rb_define_method(cCamImage.klass, "alloc_bgr", VALUEFUNC(_wrap_CamImage_alloc_bgr), -1);
  rb_define_method(cCamImage.klass, "alloc_bgra", VALUEFUNC(_wrap_CamImage_alloc_bgra), -1);
  rb_define_method(cCamImage.klass, "alloc_yuv", VALUEFUNC(_wrap_CamImage_alloc_yuv), -1);
  rb_define_method(cCamImage.klass, "alloc_hls", VALUEFUNC(_wrap_CamImage_alloc_hls), -1);
  rb_define_method(cCamImage.klass, "load_pgm", VALUEFUNC(_wrap_CamImage_load_pgm), -1);
  rb_define_method(cCamImage.klass, "save_pgm", VALUEFUNC(_wrap_CamImage_save_pgm), -1);
  rb_define_method(cCamImage.klass, "save_raw_pgm", VALUEFUNC(_wrap_CamImage_save_raw_pgm), -1);
  rb_define_method(cCamImage.klass, "load_bmp", VALUEFUNC(_wrap_CamImage_load_bmp), -1);
  rb_define_method(cCamImage.klass, "save_bmp", VALUEFUNC(_wrap_CamImage_save_bmp), -1);
  rb_define_method(cCamImage.klass, "set_roi", VALUEFUNC(_wrap_CamImage_set_roi), -1);
  rb_define_method(cCamImage.klass, "get_pixels", VALUEFUNC(_wrap_CamImage_get_pixels), -1);
  rb_define_alias(cCamImage.klass, "to_s", "get_pixels");
  rb_define_method(cCamImage.klass, "set_pixels", VALUEFUNC(_wrap_CamImage_set_pixels), -1);
  rb_define_method(cCamImage.klass, "inspect", VALUEFUNC(_wrap_CamImage_inspect), -1);
  rb_define_method(cCamImage.klass, "view", VALUEFUNC(_wrap_CamImage_view), -1);
  rb_define_method(cCamImage.klass, "set!", VALUEFUNC(_wrap_CamImage_setN___), -1);
  rb_define_alias(cCamImage.klass, "fill_with", "set!");
  rb_define_method(cCamImage.klass, "alpha_composite", VALUEFUNC(_wrap_CamImage_alpha_composite), -1);
  rb_define_method(cCamImage.klass, "erode_square3!", VALUEFUNC(_wrap_CamImage_erode_square3N___), -1);
  rb_define_method(cCamImage.klass, "erode_square3", VALUEFUNC(_wrap_CamImage_erode_square3), -1);
  rb_define_method(cCamImage.klass, "erode_circle5!", VALUEFUNC(_wrap_CamImage_erode_circle5N___), -1);
  rb_define_method(cCamImage.klass, "erode_circle5", VALUEFUNC(_wrap_CamImage_erode_circle5), -1);
  rb_define_method(cCamImage.klass, "erode_circle7!", VALUEFUNC(_wrap_CamImage_erode_circle7N___), -1);
  rb_define_method(cCamImage.klass, "erode_circle7", VALUEFUNC(_wrap_CamImage_erode_circle7), -1);
  rb_define_method(cCamImage.klass, "dilate_square3!", VALUEFUNC(_wrap_CamImage_dilate_square3N___), -1);
  rb_define_method(cCamImage.klass, "dilate_square3", VALUEFUNC(_wrap_CamImage_dilate_square3), -1);
  rb_define_method(cCamImage.klass, "dilate_circle5!", VALUEFUNC(_wrap_CamImage_dilate_circle5N___), -1);
  rb_define_method(cCamImage.klass, "dilate_circle5", VALUEFUNC(_wrap_CamImage_dilate_circle5), -1);
  rb_define_method(cCamImage.klass, "dilate_circle7!", VALUEFUNC(_wrap_CamImage_dilate_circle7N___), -1);
  rb_define_method(cCamImage.klass, "dilate_circle7", VALUEFUNC(_wrap_CamImage_dilate_circle7), -1);
  rb_define_method(cCamImage.klass, "morpho_gradient_square3!", VALUEFUNC(_wrap_CamImage_morpho_gradient_square3N___), -1);
  rb_define_method(cCamImage.klass, "morpho_gradient_square3", VALUEFUNC(_wrap_CamImage_morpho_gradient_square3), -1);
  rb_define_method(cCamImage.klass, "morpho_gradient_circle5!", VALUEFUNC(_wrap_CamImage_morpho_gradient_circle5N___), -1);
  rb_define_method(cCamImage.klass, "morpho_gradient_circle5", VALUEFUNC(_wrap_CamImage_morpho_gradient_circle5), -1);
  rb_define_method(cCamImage.klass, "morpho_gradient_circle7!", VALUEFUNC(_wrap_CamImage_morpho_gradient_circle7N___), -1);
  rb_define_method(cCamImage.klass, "morpho_gradient_circle7", VALUEFUNC(_wrap_CamImage_morpho_gradient_circle7), -1);
  rb_define_method(cCamImage.klass, "morpho_maths!", VALUEFUNC(_wrap_CamImage_morpho_mathsN___), -1);
  rb_define_method(cCamImage.klass, "morpho_maths", VALUEFUNC(_wrap_CamImage_morpho_maths), -1);
  rb_define_method(cCamImage.klass, "erode_3x3!", VALUEFUNC(_wrap_CamImage_erode_3x3N___), -1);
  rb_define_method(cCamImage.klass, "erode_3x3", VALUEFUNC(_wrap_CamImage_erode_3x3), -1);
  rb_define_method(cCamImage.klass, "dilate_3x3!", VALUEFUNC(_wrap_CamImage_dilate_3x3N___), -1);
  rb_define_method(cCamImage.klass, "dilate_3x3", VALUEFUNC(_wrap_CamImage_dilate_3x3), -1);
  rb_define_method(cCamImage.klass, "erode_5x5!", VALUEFUNC(_wrap_CamImage_erode_5x5N___), -1);
  rb_define_method(cCamImage.klass, "erode_5x5", VALUEFUNC(_wrap_CamImage_erode_5x5), -1);
  rb_define_method(cCamImage.klass, "dilate_5x5!", VALUEFUNC(_wrap_CamImage_dilate_5x5N___), -1);
  rb_define_method(cCamImage.klass, "dilate_5x5", VALUEFUNC(_wrap_CamImage_dilate_5x5), -1);
  rb_define_method(cCamImage.klass, "erode_7x7!", VALUEFUNC(_wrap_CamImage_erode_7x7N___), -1);
  rb_define_method(cCamImage.klass, "erode_7x7", VALUEFUNC(_wrap_CamImage_erode_7x7), -1);
  rb_define_method(cCamImage.klass, "dilate_7x7!", VALUEFUNC(_wrap_CamImage_dilate_7x7N___), -1);
  rb_define_method(cCamImage.klass, "dilate_7x7", VALUEFUNC(_wrap_CamImage_dilate_7x7), -1);
  rb_define_method(cCamImage.klass, "linear_filter_3x3!", VALUEFUNC(_wrap_CamImage_linear_filter_3x3N___), -1);
  rb_define_method(cCamImage.klass, "linear_filter_3x3", VALUEFUNC(_wrap_CamImage_linear_filter_3x3), -1);
  rb_define_method(cCamImage.klass, "linear_filter_5x5!", VALUEFUNC(_wrap_CamImage_linear_filter_5x5N___), -1);
  rb_define_method(cCamImage.klass, "linear_filter_5x5", VALUEFUNC(_wrap_CamImage_linear_filter_5x5), -1);
  rb_define_method(cCamImage.klass, "linear_filter_abs_3x3!", VALUEFUNC(_wrap_CamImage_linear_filter_abs_3x3N___), -1);
  rb_define_method(cCamImage.klass, "linear_filter_abs_3x3", VALUEFUNC(_wrap_CamImage_linear_filter_abs_3x3), -1);
  rb_define_method(cCamImage.klass, "linear_filter_abs_5x5!", VALUEFUNC(_wrap_CamImage_linear_filter_abs_5x5N___), -1);
  rb_define_method(cCamImage.klass, "linear_filter_abs_5x5", VALUEFUNC(_wrap_CamImage_linear_filter_abs_5x5), -1);
  rb_define_method(cCamImage.klass, "sobel_v!", VALUEFUNC(_wrap_CamImage_sobel_vN___), -1);
  rb_define_method(cCamImage.klass, "sobel_h!", VALUEFUNC(_wrap_CamImage_sobel_hN___), -1);
  rb_define_method(cCamImage.klass, "sobel_v_abs!", VALUEFUNC(_wrap_CamImage_sobel_v_absN___), -1);
  rb_define_method(cCamImage.klass, "sobel_h_abs!", VALUEFUNC(_wrap_CamImage_sobel_h_absN___), -1);
  rb_define_method(cCamImage.klass, "sobel_v", VALUEFUNC(_wrap_CamImage_sobel_v), -1);
  rb_define_method(cCamImage.klass, "sobel_h", VALUEFUNC(_wrap_CamImage_sobel_h), -1);
  rb_define_method(cCamImage.klass, "sobel_v_abs", VALUEFUNC(_wrap_CamImage_sobel_v_abs), -1);
  rb_define_method(cCamImage.klass, "sobel_h_abs", VALUEFUNC(_wrap_CamImage_sobel_h_abs), -1);
  rb_define_method(cCamImage.klass, "sep_filter_3x3!", VALUEFUNC(_wrap_CamImage_sep_filter_3x3N___), -1);
  rb_define_method(cCamImage.klass, "sep_filter_3x3", VALUEFUNC(_wrap_CamImage_sep_filter_3x3), -1);
  rb_define_method(cCamImage.klass, "sep_filter_5x5!", VALUEFUNC(_wrap_CamImage_sep_filter_5x5N___), -1);
  rb_define_method(cCamImage.klass, "sep_filter_5x5", VALUEFUNC(_wrap_CamImage_sep_filter_5x5), -1);
  rb_define_method(cCamImage.klass, "sep_filter_7x7!", VALUEFUNC(_wrap_CamImage_sep_filter_7x7N___), -1);
  rb_define_method(cCamImage.klass, "sep_filter_7x7", VALUEFUNC(_wrap_CamImage_sep_filter_7x7), -1);
  rb_define_method(cCamImage.klass, "sep_filter_abs_3x3!", VALUEFUNC(_wrap_CamImage_sep_filter_abs_3x3N___), -1);
  rb_define_method(cCamImage.klass, "sep_filter_abs_3x3", VALUEFUNC(_wrap_CamImage_sep_filter_abs_3x3), -1);
  rb_define_method(cCamImage.klass, "sep_filter_abs_5x5!", VALUEFUNC(_wrap_CamImage_sep_filter_abs_5x5N___), -1);
  rb_define_method(cCamImage.klass, "sep_filter_abs_5x5", VALUEFUNC(_wrap_CamImage_sep_filter_abs_5x5), -1);
  rb_define_method(cCamImage.klass, "sep_filter_abs_7x7!", VALUEFUNC(_wrap_CamImage_sep_filter_abs_7x7N___), -1);
  rb_define_method(cCamImage.klass, "sep_filter_abs_7x7", VALUEFUNC(_wrap_CamImage_sep_filter_abs_7x7), -1);
  rb_define_method(cCamImage.klass, "fixed_filter", VALUEFUNC(_wrap_CamImage_fixed_filter), -1);
  rb_define_method(cCamImage.klass, "fixed_filter!", VALUEFUNC(_wrap_CamImage_fixed_filterN___), -1);
  rb_define_method(cCamImage.klass, "draw_line", VALUEFUNC(_wrap_CamImage_draw_line), -1);
  rb_define_method(cCamImage.klass, "accumulate_line", VALUEFUNC(_wrap_CamImage_accumulate_line), -1);
  rb_define_method(cCamImage.klass, "draw_rectangle", VALUEFUNC(_wrap_CamImage_draw_rectangle), -1);
  rb_define_method(cCamImage.klass, "draw_text_16s", VALUEFUNC(_wrap_CamImage_draw_text_16s), -1);
  rb_define_method(cCamImage.klass, "draw_text_bitmap", VALUEFUNC(_wrap_CamImage_draw_text_bitmap), -1);
  rb_define_method(cCamImage.klass, "draw_circle", VALUEFUNC(_wrap_CamImage_draw_circle), -1);
  rb_define_method(cCamImage.klass, "draw_ellipse", VALUEFUNC(_wrap_CamImage_draw_ellipse), -1);
  rb_define_method(cCamImage.klass, "plot", VALUEFUNC(_wrap_CamImage_plot), -1);
  rb_define_method(cCamImage.klass, "fill_color", VALUEFUNC(_wrap_CamImage_fill_color), -1);
  rb_define_method(cCamImage.klass, "warping", VALUEFUNC(_wrap_CamImage_warping), -1);
  rb_define_method(cCamImage.klass, "scale", VALUEFUNC(_wrap_CamImage_scale), -1);
  rb_define_method(cCamImage.klass, "set_mask", VALUEFUNC(_wrap_CamImage_set_mask), -1);
  rb_define_alias(cCamImage.klass, "mask=", "set_mask");
  rb_define_method(cCamImage.klass, "apply_lut!", VALUEFUNC(_wrap_CamImage_apply_lutN___), -1);
  rb_define_method(cCamImage.klass, "apply_lut", VALUEFUNC(_wrap_CamImage_apply_lut), -1);
  rb_define_method(cCamImage.klass, "to_yuv", VALUEFUNC(_wrap_CamImage_to_yuv), -1);
  rb_define_method(cCamImage.klass, "to_y", VALUEFUNC(_wrap_CamImage_to_y), -1);
  rb_define_alias(cCamImage.klass, "to_grey", "to_y");
  rb_define_method(cCamImage.klass, "to_rgb", VALUEFUNC(_wrap_CamImage_to_rgb), -1);
  rb_define_method(cCamImage.klass, "to_hls", VALUEFUNC(_wrap_CamImage_to_hls), -1);
  rb_define_method(cCamImage.klass, "encode_color", VALUEFUNC(_wrap_CamImage_encode_color), -1);
  rb_define_method(cCamImage.klass, "encode", VALUEFUNC(_wrap_CamImage_encode), -1);
  rb_define_method(cCamImage.klass, "encode_lut", VALUEFUNC(_wrap_CamImage_encode_lut), -1);
  rb_define_method(cCamImage.klass, "encode_threshold", VALUEFUNC(_wrap_CamImage_encode_threshold), -1);
  rb_define_method(cCamImage.klass, "encode_threshold_inv", VALUEFUNC(_wrap_CamImage_encode_threshold_inv), -1);
  rb_define_method(cCamImage.klass, "threshold", VALUEFUNC(_wrap_CamImage_threshold), -1);
  rb_define_method(cCamImage.klass, "threshold_inv", VALUEFUNC(_wrap_CamImage_threshold_inv), -1);
  rb_define_method(cCamImage.klass, "abs", VALUEFUNC(_wrap_CamImage_abs), -1);
  rb_define_method(cCamImage.klass, "threshold!", VALUEFUNC(_wrap_CamImage_thresholdN___), -1);
  rb_define_method(cCamImage.klass, "threshold_inv!", VALUEFUNC(_wrap_CamImage_threshold_invN___), -1);
  rb_define_method(cCamImage.klass, "abs!", VALUEFUNC(_wrap_CamImage_absN___), -1);
  rb_define_method(cCamImage.klass, "arithm!", VALUEFUNC(_wrap_CamImage_arithmN___), -1);
  rb_define_method(cCamImage.klass, "arithm", VALUEFUNC(_wrap_CamImage_arithm), -1);
  rb_define_method(cCamImage.klass, "measures", VALUEFUNC(_wrap_CamImage_measures), -1);
  rb_define_method(cCamImage.klass, "average_deviation", VALUEFUNC(_wrap_CamImage_average_deviation), -1);
  rb_define_method(cCamImage.klass, "sum_hv", VALUEFUNC(_wrap_CamImage_sum_hv), -1);
  rb_define_method(cCamImage.klass, "sum_h", VALUEFUNC(_wrap_CamImage_sum_h), -1);
  rb_define_method(cCamImage.klass, "sum_v", VALUEFUNC(_wrap_CamImage_sum_v), -1);
  rb_define_method(cCamImage.klass, "histogram", VALUEFUNC(_wrap_CamImage_histogram), -1);
  rb_define_method(cCamImage.klass, "histogram_equalization", VALUEFUNC(_wrap_CamImage_histogram_equalization), -1);
  rb_define_method(cCamImage.klass, "histogram_2_channels", VALUEFUNC(_wrap_CamImage_histogram_2_channels), -1);
  rb_define_method(cCamImage.klass, "find_threshold", VALUEFUNC(_wrap_CamImage_find_threshold), -1);
  rb_define_method(cCamImage.klass, "hough_circle", VALUEFUNC(_wrap_CamImage_hough_circle), -1);
  rb_define_method(cCamImage.klass, "hierarchical_watershed", VALUEFUNC(_wrap_CamImage_hierarchical_watershed), -1);
  rb_define_method(cCamImage.klass, "hierarchical_watershed_contours", VALUEFUNC(_wrap_CamImage_hierarchical_watershed_contours), -1);
  rb_define_method(cCamImage.klass, "hierarchical_watershed_regions!", VALUEFUNC(_wrap_CamImage_hierarchical_watershed_regionsN___), -1);
  rb_define_method(cCamImage.klass, "draw_keypoints!", VALUEFUNC(_wrap_CamImage_draw_keypointsN___), -1);
  rb_define_method(cCamImage.klass, "draw_keypoint", VALUEFUNC(_wrap_CamImage_draw_keypoint), -1);
  rb_define_method(cCamImage.klass, "harris", VALUEFUNC(_wrap_CamImage_harris), -1);
  rb_define_method(cCamImage.klass, "integral_image", VALUEFUNC(_wrap_CamImage_integral_image), -1);
  rb_define_method(cCamImage.klass, "fast_hessian_detector", VALUEFUNC(_wrap_CamImage_fast_hessian_detector), -1);
  cCamImage.mark = (void (*)(void *)) mark_CamImage;
  cCamImage.destroy = (void (*)(void *)) free_CamImage;
  cCamImage.trackObjects = 1;
  rb_define_const(mCamellia, "CAM_ARITHM_ABS", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_ARITHM_INVERSE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_ARITHM_SELECT", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_ARITHM_THRESHOLD", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_ARITHM_DOUBLE_THRESHOLD", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_ARITHM_ADD", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_ARITHM_SUM", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_ARITHM_SUB", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_ARITHM_MUL", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_ARITHM_ABSDIFF", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_ARITHM_WEIGHTED_SUM", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_ARITHM_INF", SWIG_From_int(static_cast< int >(5)));
  rb_define_const(mCamellia, "CAM_ARITHM_SUP", SWIG_From_int(static_cast< int >(6)));
  rb_define_const(mCamellia, "CAM_ARITHM_COMP_INF", SWIG_From_int(static_cast< int >(7)));
  rb_define_const(mCamellia, "CAM_ARITHM_COMP_EQUAL", SWIG_From_int(static_cast< int >(8)));
  rb_define_const(mCamellia, "CAM_ARITHM_COMP_SUP", SWIG_From_int(static_cast< int >(9)));
  rb_define_const(mCamellia, "CAM_ARITHM_AND", SWIG_From_int(static_cast< int >(10)));
  rb_define_const(mCamellia, "CAM_ARITHM_OR", SWIG_From_int(static_cast< int >(11)));
  rb_define_const(mCamellia, "CAM_ABS", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_INVERSE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_SELECT", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_THRESHOLD", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_DOUBLE_THRESHOLD", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_ADD", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_SUM", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_SUB", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_ABSDIFF", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_WEIGHTED_SUM", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_INF", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_SUP", SWIG_From_int(static_cast< int >(5)));
  rb_define_const(mCamellia, "CAM_COMP_INF", SWIG_From_int(static_cast< int >(6)));
  rb_define_const(mCamellia, "CAM_COMP_EQUAL", SWIG_From_int(static_cast< int >(7)));
  rb_define_const(mCamellia, "CAM_COMP_SUP", SWIG_From_int(static_cast< int >(8)));
  rb_define_const(mCamellia, "CAM_AND", SWIG_From_int(static_cast< int >(9)));
  rb_define_const(mCamellia, "CAM_OR", SWIG_From_int(static_cast< int >(10)));
  rb_define_const(mCamellia, "CAM_MM_NEIGHB", SWIG_From_int(static_cast< int >(7)));
  rb_define_const(mCamellia, "CAM_MM_DILATED", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_MM_ERODED", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_MM_ORIGINAL", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_MM_SUBSTRACTION", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_MM_MULTIPLEX", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_MM_THINNING", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_MM_THICKENING", SWIG_From_int(static_cast< int >(3)));
  
  cCamMorphoMathsKernel.klass = rb_define_class_under(mCamellia, "CamMorphoMathsKernel", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamMorphoMathsKernel, (void *) &cCamMorphoMathsKernel);
  rb_define_alloc_func(cCamMorphoMathsKernel.klass, _wrap_CamMorphoMathsKernel_allocate);
  rb_define_method(cCamMorphoMathsKernel.klass, "initialize", VALUEFUNC(_wrap_new_CamMorphoMathsKernel), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "source1=", VALUEFUNC(_wrap_CamMorphoMathsKernel_source1_set), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "source1", VALUEFUNC(_wrap_CamMorphoMathsKernel_source1_get), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "source2=", VALUEFUNC(_wrap_CamMorphoMathsKernel_source2_set), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "source2", VALUEFUNC(_wrap_CamMorphoMathsKernel_source2_get), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "operation=", VALUEFUNC(_wrap_CamMorphoMathsKernel_operation_set), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "operation", VALUEFUNC(_wrap_CamMorphoMathsKernel_operation_get), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "set_dilate", VALUEFUNC(_wrap_CamMorphoMathsKernel_set_dilate), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "get_dilate", VALUEFUNC(_wrap_CamMorphoMathsKernel_get_dilate), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "set_erode", VALUEFUNC(_wrap_CamMorphoMathsKernel_set_erode), -1);
  rb_define_method(cCamMorphoMathsKernel.klass, "get_erode", VALUEFUNC(_wrap_CamMorphoMathsKernel_get_erode), -1);
  cCamMorphoMathsKernel.mark = 0;
  cCamMorphoMathsKernel.destroy = (void (*)(void *)) free_CamMorphoMathsKernel;
  cCamMorphoMathsKernel.trackObjects = 1;
  
  cCamRun.klass = rb_define_class_under(mCamellia, "CamRun", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamRun, (void *) &cCamRun);
  rb_define_alloc_func(cCamRun.klass, _wrap_CamRun_allocate);
  rb_define_method(cCamRun.klass, "initialize", VALUEFUNC(_wrap_new_CamRun), -1);
  rb_define_method(cCamRun.klass, "value=", VALUEFUNC(_wrap_CamRun_value_set), -1);
  rb_define_method(cCamRun.klass, "value", VALUEFUNC(_wrap_CamRun_value_get), -1);
  rb_define_method(cCamRun.klass, "length=", VALUEFUNC(_wrap_CamRun_length_set), -1);
  rb_define_method(cCamRun.klass, "length", VALUEFUNC(_wrap_CamRun_length_get), -1);
  rb_define_method(cCamRun.klass, "blob=", VALUEFUNC(_wrap_CamRun_blob_set), -1);
  rb_define_method(cCamRun.klass, "blob", VALUEFUNC(_wrap_CamRun_blob_get), -1);
  rb_define_method(cCamRun.klass, "line=", VALUEFUNC(_wrap_CamRun_line_set), -1);
  rb_define_method(cCamRun.klass, "line", VALUEFUNC(_wrap_CamRun_line_get), -1);
  cCamRun.mark = 0;
  cCamRun.destroy = (void (*)(void *)) free_CamRun;
  cCamRun.trackObjects = 1;
  
  cCamMeasuresResults.klass = rb_define_class_under(mCamellia, "CamMeasuresResults", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamMeasuresResults, (void *) &cCamMeasuresResults);
  rb_define_alloc_func(cCamMeasuresResults.klass, _wrap_CamMeasuresResults_allocate);
  rb_define_method(cCamMeasuresResults.klass, "initialize", VALUEFUNC(_wrap_new_CamMeasuresResults), -1);
  rb_define_method(cCamMeasuresResults.klass, "min=", VALUEFUNC(_wrap_CamMeasuresResults_min_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "min", VALUEFUNC(_wrap_CamMeasuresResults_min_get), -1);
  rb_define_method(cCamMeasuresResults.klass, "xmin=", VALUEFUNC(_wrap_CamMeasuresResults_xmin_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "xmin", VALUEFUNC(_wrap_CamMeasuresResults_xmin_get), -1);
  rb_define_method(cCamMeasuresResults.klass, "ymin=", VALUEFUNC(_wrap_CamMeasuresResults_ymin_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "ymin", VALUEFUNC(_wrap_CamMeasuresResults_ymin_get), -1);
  rb_define_method(cCamMeasuresResults.klass, "max=", VALUEFUNC(_wrap_CamMeasuresResults_max_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "max", VALUEFUNC(_wrap_CamMeasuresResults_max_get), -1);
  rb_define_method(cCamMeasuresResults.klass, "xmax=", VALUEFUNC(_wrap_CamMeasuresResults_xmax_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "xmax", VALUEFUNC(_wrap_CamMeasuresResults_xmax_get), -1);
  rb_define_method(cCamMeasuresResults.klass, "ymax=", VALUEFUNC(_wrap_CamMeasuresResults_ymax_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "ymax", VALUEFUNC(_wrap_CamMeasuresResults_ymax_get), -1);
  rb_define_method(cCamMeasuresResults.klass, "average=", VALUEFUNC(_wrap_CamMeasuresResults_average_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "average", VALUEFUNC(_wrap_CamMeasuresResults_average_get), -1);
  rb_define_method(cCamMeasuresResults.klass, "sum=", VALUEFUNC(_wrap_CamMeasuresResults_sum_set), -1);
  rb_define_method(cCamMeasuresResults.klass, "sum", VALUEFUNC(_wrap_CamMeasuresResults_sum_get), -1);
  cCamMeasuresResults.mark = 0;
  cCamMeasuresResults.destroy = (void (*)(void *)) free_CamMeasuresResults;
  cCamMeasuresResults.trackObjects = 1;
  rb_define_const(mCamellia, "CAM_NN_INTERPOLATION", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_BILINEAR_INTERPOLATION", SWIG_From_int(static_cast< int >(1)));
  
  cCamLinearFilterKernel.klass = rb_define_class_under(mCamellia, "CamLinearFilterKernel", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamLinearFilterKernel, (void *) &cCamLinearFilterKernel);
  rb_define_alloc_func(cCamLinearFilterKernel.klass, _wrap_CamLinearFilterKernel_allocate);
  rb_define_method(cCamLinearFilterKernel.klass, "initialize", VALUEFUNC(_wrap_new_CamLinearFilterKernel), -1);
  rb_define_method(cCamLinearFilterKernel.klass, "coeff1=", VALUEFUNC(_wrap_CamLinearFilterKernel_coeff1_set), -1);
  rb_define_method(cCamLinearFilterKernel.klass, "coeff1", VALUEFUNC(_wrap_CamLinearFilterKernel_coeff1_get), -1);
  rb_define_method(cCamLinearFilterKernel.klass, "coeff2=", VALUEFUNC(_wrap_CamLinearFilterKernel_coeff2_set), -1);
  rb_define_method(cCamLinearFilterKernel.klass, "coeff2", VALUEFUNC(_wrap_CamLinearFilterKernel_coeff2_get), -1);
  rb_define_method(cCamLinearFilterKernel.klass, "set", VALUEFUNC(_wrap_CamLinearFilterKernel_set), -1);
  rb_define_method(cCamLinearFilterKernel.klass, "get", VALUEFUNC(_wrap_CamLinearFilterKernel_get), -1);
  cCamLinearFilterKernel.mark = 0;
  cCamLinearFilterKernel.destroy = (void (*)(void *)) free_CamLinearFilterKernel;
  cCamLinearFilterKernel.trackObjects = 1;
  
  cCamSepFilterKernel.klass = rb_define_class_under(mCamellia, "CamSepFilterKernel", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamSepFilterKernel, (void *) &cCamSepFilterKernel);
  rb_define_alloc_func(cCamSepFilterKernel.klass, _wrap_CamSepFilterKernel_allocate);
  rb_define_method(cCamSepFilterKernel.klass, "initialize", VALUEFUNC(_wrap_new_CamSepFilterKernel), -1);
  rb_define_method(cCamSepFilterKernel.klass, "coeff1=", VALUEFUNC(_wrap_CamSepFilterKernel_coeff1_set), -1);
  rb_define_method(cCamSepFilterKernel.klass, "coeff1", VALUEFUNC(_wrap_CamSepFilterKernel_coeff1_get), -1);
  rb_define_method(cCamSepFilterKernel.klass, "coeff2=", VALUEFUNC(_wrap_CamSepFilterKernel_coeff2_set), -1);
  rb_define_method(cCamSepFilterKernel.klass, "coeff2", VALUEFUNC(_wrap_CamSepFilterKernel_coeff2_get), -1);
  rb_define_method(cCamSepFilterKernel.klass, "set_x", VALUEFUNC(_wrap_CamSepFilterKernel_set_x), -1);
  rb_define_method(cCamSepFilterKernel.klass, "set_y", VALUEFUNC(_wrap_CamSepFilterKernel_set_y), -1);
  rb_define_method(cCamSepFilterKernel.klass, "get_x", VALUEFUNC(_wrap_CamSepFilterKernel_get_x), -1);
  rb_define_method(cCamSepFilterKernel.klass, "get_y", VALUEFUNC(_wrap_CamSepFilterKernel_get_y), -1);
  cCamSepFilterKernel.mark = 0;
  cCamSepFilterKernel.destroy = (void (*)(void *)) free_CamSepFilterKernel;
  cCamSepFilterKernel.trackObjects = 1;
  rb_define_const(mCamellia, "CAM_SOBEL_H", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_SOBEL_V", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_GAUSSIAN_3x3", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_GAUSSIAN_5x5", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_GAUSSIAN_7x7", SWIG_From_int(static_cast< int >(5)));
  rb_define_const(mCamellia, "CAM_SCHARR_H", SWIG_From_int(static_cast< int >(6)));
  rb_define_const(mCamellia, "CAM_SCHARR_V", SWIG_From_int(static_cast< int >(7)));
  
  cCamBasin.klass = rb_define_class_under(mCamellia, "CamBasin", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamBasin, (void *) &cCamBasin);
  rb_define_alloc_func(cCamBasin.klass, _wrap_CamBasin_allocate);
  rb_define_method(cCamBasin.klass, "initialize", VALUEFUNC(_wrap_new_CamBasin), -1);
  rb_define_method(cCamBasin.klass, "dynamics", VALUEFUNC(_wrap_CamBasin_dynamics_get), -1);
  rb_define_method(cCamBasin.klass, "minimum", VALUEFUNC(_wrap_CamBasin_minimum_get), -1);
  rb_define_method(cCamBasin.klass, "flooded", VALUEFUNC(_wrap_CamBasin_flooded_get), -1);
  rb_define_method(cCamBasin.klass, "surface", VALUEFUNC(_wrap_CamBasin_surface_get), -1);
  rb_define_method(cCamBasin.klass, "accsurface", VALUEFUNC(_wrap_CamBasin_accsurface_get), -1);
  rb_define_method(cCamBasin.klass, "x", VALUEFUNC(_wrap_CamBasin_x_get), -1);
  rb_define_method(cCamBasin.klass, "y", VALUEFUNC(_wrap_CamBasin_y_get), -1);
  cCamBasin.mark = 0;
  cCamBasin.destroy = (void (*)(void *)) free_CamBasin;
  cCamBasin.trackObjects = 0;
  rb_define_const(mCamellia, "CAM_NOT_COMPUTED", SWIG_From_int(static_cast< int >(65536)));
  
  cCamKeypoint.klass = rb_define_class_under(mCamellia, "CamKeypoint", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamKeypoint, (void *) &cCamKeypoint);
  rb_define_alloc_func(cCamKeypoint.klass, _wrap_CamKeypoint_allocate);
  rb_define_method(cCamKeypoint.klass, "initialize", VALUEFUNC(_wrap_new_CamKeypoint), -1);
  rb_define_method(cCamKeypoint.klass, "descriptor=", VALUEFUNC(_wrap_CamKeypoint_descriptor_set), -1);
  rb_define_method(cCamKeypoint.klass, "descriptor", VALUEFUNC(_wrap_CamKeypoint_descriptor_get), -1);
  rb_define_method(cCamKeypoint.klass, "x=", VALUEFUNC(_wrap_CamKeypoint_x_set), -1);
  rb_define_method(cCamKeypoint.klass, "x", VALUEFUNC(_wrap_CamKeypoint_x_get), -1);
  rb_define_method(cCamKeypoint.klass, "y=", VALUEFUNC(_wrap_CamKeypoint_y_set), -1);
  rb_define_method(cCamKeypoint.klass, "y", VALUEFUNC(_wrap_CamKeypoint_y_get), -1);
  rb_define_method(cCamKeypoint.klass, "scale=", VALUEFUNC(_wrap_CamKeypoint_scale_set), -1);
  rb_define_method(cCamKeypoint.klass, "scale", VALUEFUNC(_wrap_CamKeypoint_scale_get), -1);
  rb_define_method(cCamKeypoint.klass, "angle=", VALUEFUNC(_wrap_CamKeypoint_angle_set), -1);
  rb_define_method(cCamKeypoint.klass, "angle", VALUEFUNC(_wrap_CamKeypoint_angle_get), -1);
  rb_define_method(cCamKeypoint.klass, "value=", VALUEFUNC(_wrap_CamKeypoint_value_set), -1);
  rb_define_method(cCamKeypoint.klass, "value", VALUEFUNC(_wrap_CamKeypoint_value_get), -1);
  rb_define_method(cCamKeypoint.klass, "size", VALUEFUNC(_wrap_CamKeypoint_size_get), -1);
  rb_define_method(cCamKeypoint.klass, "internal", VALUEFUNC(_wrap_CamKeypoint_internal_get), -1);
  rb_define_method(cCamKeypoint.klass, "set", VALUEFUNC(_wrap_CamKeypoint_set_get), -1);
  rb_define_method(cCamKeypoint.klass, "draw", VALUEFUNC(_wrap_CamKeypoint_draw), -1);
  rb_define_method(cCamKeypoint.klass, "set_descriptor", VALUEFUNC(_wrap_CamKeypoint_set_descriptor), -1);
  rb_define_alias(cCamKeypoint.klass, "descriptor=", "set_descriptor");
  cCamKeypoint.mark = (void (*)(void *)) mark_CamKeypoint;
  cCamKeypoint.destroy = (void (*)(void *)) free_CamKeypoint;
  cCamKeypoint.trackObjects = 1;
  
  cCamKeypointsMatch.klass = rb_define_class_under(mCamellia, "CamKeypointsMatch", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamKeypointsMatch, (void *) &cCamKeypointsMatch);
  rb_define_alloc_func(cCamKeypointsMatch.klass, _wrap_CamKeypointsMatch_allocate);
  rb_define_method(cCamKeypointsMatch.klass, "initialize", VALUEFUNC(_wrap_new_CamKeypointsMatch), -1);
  rb_define_method(cCamKeypointsMatch.klass, "p1=", VALUEFUNC(_wrap_CamKeypointsMatch_p1_set), -1);
  rb_define_method(cCamKeypointsMatch.klass, "p1", VALUEFUNC(_wrap_CamKeypointsMatch_p1_get), -1);
  rb_define_method(cCamKeypointsMatch.klass, "p2=", VALUEFUNC(_wrap_CamKeypointsMatch_p2_set), -1);
  rb_define_method(cCamKeypointsMatch.klass, "p2", VALUEFUNC(_wrap_CamKeypointsMatch_p2_get), -1);
  rb_define_method(cCamKeypointsMatch.klass, "mark=", VALUEFUNC(_wrap_CamKeypointsMatch_mark_set), -1);
  rb_define_method(cCamKeypointsMatch.klass, "mark", VALUEFUNC(_wrap_CamKeypointsMatch_mark_get), -1);
  rb_define_method(cCamKeypointsMatch.klass, "error=", VALUEFUNC(_wrap_CamKeypointsMatch_error_set), -1);
  rb_define_method(cCamKeypointsMatch.klass, "error", VALUEFUNC(_wrap_CamKeypointsMatch_error_get), -1);
  cCamKeypointsMatch.mark = (void (*)(void *)) mark_CamKeypointsMatch;
  cCamKeypointsMatch.destroy = (void (*)(void *)) free_CamKeypointsMatch;
  cCamKeypointsMatch.trackObjects = 1;
  rb_define_const(mCamellia, "CAM_MAX_NB_MATCHES", SWIG_From_int(static_cast< int >(2048)));
  
  cCamAffineTransform.klass = rb_define_class_under(mCamellia, "CamAffineTransform", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamAffineTransform, (void *) &cCamAffineTransform);
  rb_define_alloc_func(cCamAffineTransform.klass, _wrap_CamAffineTransform_allocate);
  rb_define_method(cCamAffineTransform.klass, "initialize", VALUEFUNC(_wrap_new_CamAffineTransform), -1);
  rb_define_method(cCamAffineTransform.klass, "m=", VALUEFUNC(_wrap_CamAffineTransform_m_set), -1);
  rb_define_method(cCamAffineTransform.klass, "m", VALUEFUNC(_wrap_CamAffineTransform_m_get), -1);
  cCamAffineTransform.mark = 0;
  cCamAffineTransform.destroy = (void (*)(void *)) free_CamAffineTransform;
  cCamAffineTransform.trackObjects = 1;
  
  cCamKeypointsMatches.klass = rb_define_class_under(mCamellia, "CamKeypointsMatches", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamKeypointsMatches, (void *) &cCamKeypointsMatches);
  rb_define_alloc_func(cCamKeypointsMatches.klass, _wrap_CamKeypointsMatches_allocate);
  rb_define_method(cCamKeypointsMatches.klass, "initialize", VALUEFUNC(_wrap_new_CamKeypointsMatches), -1);
  rb_define_method(cCamKeypointsMatches.klass, "nb_matches=", VALUEFUNC(_wrap_CamKeypointsMatches_nb_matches_set), -1);
  rb_define_method(cCamKeypointsMatches.klass, "nb_matches", VALUEFUNC(_wrap_CamKeypointsMatches_nb_matches_get), -1);
  rb_define_method(cCamKeypointsMatches.klass, "nb_outliers=", VALUEFUNC(_wrap_CamKeypointsMatches_nb_outliers_set), -1);
  rb_define_method(cCamKeypointsMatches.klass, "nb_outliers", VALUEFUNC(_wrap_CamKeypointsMatches_nb_outliers_get), -1);
  rb_define_method(cCamKeypointsMatches.klass, "allocated=", VALUEFUNC(_wrap_CamKeypointsMatches_allocated_set), -1);
  rb_define_method(cCamKeypointsMatches.klass, "allocated", VALUEFUNC(_wrap_CamKeypointsMatches_allocated_get), -1);
  rb_define_method(cCamKeypointsMatches.klass, "pairs=", VALUEFUNC(_wrap_CamKeypointsMatches_pairs_set), -1);
  rb_define_method(cCamKeypointsMatches.klass, "pairs", VALUEFUNC(_wrap_CamKeypointsMatches_pairs_get), -1);
  rb_define_method(cCamKeypointsMatches.klass, "find_affine_transform", VALUEFUNC(_wrap_CamKeypointsMatches_find_affine_transform), -1);
  rb_define_method(cCamKeypointsMatches.klass, "find_affine_transform2", VALUEFUNC(_wrap_CamKeypointsMatches_find_affine_transform2), -1);
  rb_define_method(cCamKeypointsMatches.klass, "[]", VALUEFUNC(_wrap_CamKeypointsMatches___getitem__), -1);
  rb_define_method(cCamKeypointsMatches.klass, "each", VALUEFUNC(_wrap_CamKeypointsMatches_each), -1);
  cCamKeypointsMatches.mark = (void (*)(void *)) mark_CamKeypointsMatches;
  cCamKeypointsMatches.destroy = (void (*)(void *)) free_CamKeypointsMatches;
  cCamKeypointsMatches.trackObjects = 1;
  
  cCamKeypoints.klass = rb_define_class_under(mCamellia, "CamKeypoints", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamKeypoints, (void *) &cCamKeypoints);
  rb_define_alloc_func(cCamKeypoints.klass, _wrap_CamKeypoints_allocate);
  rb_define_method(cCamKeypoints.klass, "initialize", VALUEFUNC(_wrap_new_CamKeypoints), -1);
  rb_define_method(cCamKeypoints.klass, "width=", VALUEFUNC(_wrap_CamKeypoints_width_set), -1);
  rb_define_method(cCamKeypoints.klass, "width", VALUEFUNC(_wrap_CamKeypoints_width_get), -1);
  rb_define_method(cCamKeypoints.klass, "height=", VALUEFUNC(_wrap_CamKeypoints_height_set), -1);
  rb_define_method(cCamKeypoints.klass, "height", VALUEFUNC(_wrap_CamKeypoints_height_get), -1);
  rb_define_method(cCamKeypoints.klass, "cx=", VALUEFUNC(_wrap_CamKeypoints_cx_set), -1);
  rb_define_method(cCamKeypoints.klass, "cx", VALUEFUNC(_wrap_CamKeypoints_cx_get), -1);
  rb_define_method(cCamKeypoints.klass, "cy=", VALUEFUNC(_wrap_CamKeypoints_cy_set), -1);
  rb_define_method(cCamKeypoints.klass, "cy", VALUEFUNC(_wrap_CamKeypoints_cy_get), -1);
  rb_define_method(cCamKeypoints.klass, "id=", VALUEFUNC(_wrap_CamKeypoints_id_set), -1);
  rb_define_method(cCamKeypoints.klass, "id", VALUEFUNC(_wrap_CamKeypoints_id_get), -1);
  rb_define_method(cCamKeypoints.klass, "allocated", VALUEFUNC(_wrap_CamKeypoints_allocated_get), -1);
  rb_define_method(cCamKeypoints.klass, "nb_points", VALUEFUNC(_wrap_CamKeypoints_nb_points_get), -1);
  rb_define_method(cCamKeypoints.klass, "keypoint", VALUEFUNC(_wrap_CamKeypoints_keypoint_get), -1);
  rb_define_method(cCamKeypoints.klass, "bag", VALUEFUNC(_wrap_CamKeypoints_bag_get), -1);
  rb_define_method(cCamKeypoints.klass, "add", VALUEFUNC(_wrap_CamKeypoints_add), -1);
  rb_define_method(cCamKeypoints.klass, "<<", VALUEFUNC(_wrap_CamKeypoints___lshift__), -1);
  rb_define_method(cCamKeypoints.klass, "draw", VALUEFUNC(_wrap_CamKeypoints_draw), -1);
  rb_define_method(cCamKeypoints.klass, "matching", VALUEFUNC(_wrap_CamKeypoints_matching), -1);
  rb_define_method(cCamKeypoints.klass, "matching2", VALUEFUNC(_wrap_CamKeypoints_matching2), -1);
  rb_define_method(cCamKeypoints.klass, "matchingKdTree", VALUEFUNC(_wrap_CamKeypoints_matchingKdTree), -1);
  rb_define_method(cCamKeypoints.klass, "alloc", VALUEFUNC(_wrap_CamKeypoints_alloc), -1);
  rb_define_method(cCamKeypoints.klass, "realloc", VALUEFUNC(_wrap_CamKeypoints_realloc), -1);
  rb_define_method(cCamKeypoints.klass, "[]", VALUEFUNC(_wrap_CamKeypoints___getitem__), -1);
  rb_define_method(cCamKeypoints.klass, "each", VALUEFUNC(_wrap_CamKeypoints_each), -1);
  cCamKeypoints.mark = (void (*)(void *)) mark_CamKeypoints;
  cCamKeypoints.destroy = (void (*)(void *)) free_CamKeypoints;
  cCamKeypoints.trackObjects = 1;
  rb_define_const(mCamellia, "CAM_UPRIGHT", SWIG_From_int(static_cast< int >(1)));
  rb_define_module_function(mCamellia, "camKeypointsSetParameters", VALUEFUNC(_wrap_camKeypointsSetParameters), -1);
  
  cCamKeypointsKdTree.klass = rb_define_class_under(mCamellia, "CamKeypointsKdTree", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamKeypointsKdTree, (void *) &cCamKeypointsKdTree);
  rb_define_alloc_func(cCamKeypointsKdTree.klass, _wrap_CamKeypointsKdTree_allocate);
  rb_define_method(cCamKeypointsKdTree.klass, "initialize", VALUEFUNC(_wrap_new_CamKeypointsKdTree), -1);
  rb_define_method(cCamKeypointsKdTree.klass, "root=", VALUEFUNC(_wrap_CamKeypointsKdTree_root_set), -1);
  rb_define_method(cCamKeypointsKdTree.klass, "root", VALUEFUNC(_wrap_CamKeypointsKdTree_root_get), -1);
  rb_define_method(cCamKeypointsKdTree.klass, "compile", VALUEFUNC(_wrap_CamKeypointsKdTree_compile), -1);
  rb_define_method(cCamKeypointsKdTree.klass, "find", VALUEFUNC(_wrap_CamKeypointsKdTree_find), -1);
  cCamKeypointsKdTree.mark = 0;
  cCamKeypointsKdTree.destroy = (void (*)(void *)) free_CamKeypointsKdTree;
  cCamKeypointsKdTree.trackObjects = 1;
  rb_define_module_function(mCamellia, "cam_set_viewer", VALUEFUNC(_wrap_cam_set_viewer), -1);
  
  cCamBitmapFont.klass = rb_define_class_under(mCamellia, "CamBitmapFont", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamBitmapFont, (void *) &cCamBitmapFont);
  rb_define_alloc_func(cCamBitmapFont.klass, _wrap_CamBitmapFont_allocate);
  rb_define_method(cCamBitmapFont.klass, "initialize", VALUEFUNC(_wrap_new_CamBitmapFont), -1);
  rb_define_method(cCamBitmapFont.klass, "first_char=", VALUEFUNC(_wrap_CamBitmapFont_first_char_set), -1);
  rb_define_method(cCamBitmapFont.klass, "first_char", VALUEFUNC(_wrap_CamBitmapFont_first_char_get), -1);
  rb_define_method(cCamBitmapFont.klass, "nb_chars=", VALUEFUNC(_wrap_CamBitmapFont_nb_chars_set), -1);
  rb_define_method(cCamBitmapFont.klass, "nb_chars", VALUEFUNC(_wrap_CamBitmapFont_nb_chars_get), -1);
  rb_define_method(cCamBitmapFont.klass, "height=", VALUEFUNC(_wrap_CamBitmapFont_height_set), -1);
  rb_define_method(cCamBitmapFont.klass, "height", VALUEFUNC(_wrap_CamBitmapFont_height_get), -1);
  rb_define_method(cCamBitmapFont.klass, "masks=", VALUEFUNC(_wrap_CamBitmapFont_masks_set), -1);
  rb_define_method(cCamBitmapFont.klass, "masks", VALUEFUNC(_wrap_CamBitmapFont_masks_get), -1);
  rb_define_method(cCamBitmapFont.klass, "letters=", VALUEFUNC(_wrap_CamBitmapFont_letters_set), -1);
  rb_define_method(cCamBitmapFont.klass, "letters", VALUEFUNC(_wrap_CamBitmapFont_letters_get), -1);
  rb_define_method(cCamBitmapFont.klass, "load", VALUEFUNC(_wrap_CamBitmapFont_load), -1);
  cCamBitmapFont.mark = 0;
  cCamBitmapFont.destroy = (void (*)(void *)) free_CamBitmapFont;
  cCamBitmapFont.trackObjects = 1;
  rb_define_module_function(mCamellia, "cam_rgb", VALUEFUNC(_wrap_cam_rgb), -1);
  rb_define_module_function(mCamellia, "camRGBA", VALUEFUNC(_wrap_camRGBA), -1);
  rb_define_const(mCamellia, "CAM_CAPTURE_AUTO_SOURCE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_CAPTURE_DISPLAY", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_CAPTURE_USE_READ", SWIG_From_int(static_cast< int >(4)));
  
  cCamCapture2.klass = rb_define_class_under(mCamellia, "CamCapture2", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamCapture, (void *) &cCamCapture2);
  rb_define_alloc_func(cCamCapture2.klass, _wrap_CamCapture2_allocate);
  rb_define_method(cCamCapture2.klass, "initialize", VALUEFUNC(_wrap_new_CamCapture2), -1);
  rb_define_method(cCamCapture2.klass, "capture", VALUEFUNC(_wrap_CamCapture2_capture), -1);
  rb_define_method(cCamCapture2.klass, "ready", VALUEFUNC(_wrap_CamCapture2_ready), -1);
  cCamCapture2.mark = 0;
  cCamCapture2.destroy = (void (*)(void *)) free_CamCapture;
  cCamCapture2.trackObjects = 1;
  rb_define_const(mCamellia, "CAM_COLORMODEL_GREY", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_COLORMODEL_RGB", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_COLORMODEL_RGBA", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_COLORMODEL_YUV", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_CHANNELSEQ_GREY", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mCamellia, "CAM_CHANNELSEQ_RGB", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mCamellia, "CAM_CHANNELSEQ_RGBA", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mCamellia, "CAM_CHANNELSEQ_YUV", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mCamellia, "CAM_CHANNELSEQ_BGR", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mCamellia, "CAM_CHANNELSEQ_BGRA", SWIG_From_int(static_cast< int >(5)));
  
  cCamTable.klass = rb_define_class_under(mCamellia, "CamTable", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamTable, (void *) &cCamTable);
  rb_include_module(cCamTable.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(cCamTable.klass, _wrap_CamTable_allocate);
  rb_define_method(cCamTable.klass, "initialize", VALUEFUNC(_wrap_new_CamTable), -1);
  rb_define_method(cCamTable.klass, "size=", VALUEFUNC(_wrap_CamTable_size_set), -1);
  rb_define_method(cCamTable.klass, "size", VALUEFUNC(_wrap_CamTable_size_get), -1);
  rb_define_method(cCamTable.klass, "set", VALUEFUNC(_wrap_CamTable_set), -1);
  rb_define_method(cCamTable.klass, "[]", VALUEFUNC(_wrap_CamTable___getitem__), -1);
  rb_define_method(cCamTable.klass, "[]=", VALUEFUNC(_wrap_CamTable___setitem__), -1);
  rb_define_method(cCamTable.klass, "each", VALUEFUNC(_wrap_CamTable_each), -1);
  cCamTable.mark = 0;
  cCamTable.destroy = (void (*)(void *)) free_CamTable;
  cCamTable.trackObjects = 1;
  
  cCamRLEImage.klass = rb_define_class_under(mCamellia, "CamRLEImage", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamRLEImage, (void *) &cCamRLEImage);
  rb_define_alloc_func(cCamRLEImage.klass, _wrap_CamRLEImage_allocate);
  rb_define_method(cCamRLEImage.klass, "initialize", VALUEFUNC(_wrap_new_CamRLEImage), -1);
  rb_define_method(cCamRLEImage.klass, "id=", VALUEFUNC(_wrap_CamRLEImage_id_set), -1);
  rb_define_method(cCamRLEImage.klass, "id", VALUEFUNC(_wrap_CamRLEImage_id_get), -1);
  rb_define_method(cCamRLEImage.klass, "height", VALUEFUNC(_wrap_CamRLEImage_height_get), -1);
  rb_define_method(cCamRLEImage.klass, "width", VALUEFUNC(_wrap_CamRLEImage_width_get), -1);
  rb_define_method(cCamRLEImage.klass, "nb_runs", VALUEFUNC(_wrap_CamRLEImage_nb_runs_get), -1);
  rb_define_method(cCamRLEImage.klass, "allocated", VALUEFUNC(_wrap_CamRLEImage_allocated_get), -1);
  rb_define_method(cCamRLEImage.klass, "clone", VALUEFUNC(_wrap_CamRLEImage_clone), -1);
  rb_define_method(cCamRLEImage.klass, "alloc", VALUEFUNC(_wrap_CamRLEImage_alloc), -1);
  rb_define_method(cCamRLEImage.klass, "realloc", VALUEFUNC(_wrap_CamRLEImage_realloc), -1);
  rb_define_method(cCamRLEImage.klass, "encode", VALUEFUNC(_wrap_CamRLEImage_encode), -1);
  rb_define_method(cCamRLEImage.klass, "encode_lut", VALUEFUNC(_wrap_CamRLEImage_encode_lut), -1);
  rb_define_method(cCamRLEImage.klass, "encode_threshold", VALUEFUNC(_wrap_CamRLEImage_encode_threshold), -1);
  rb_define_method(cCamRLEImage.klass, "encode_threshold_inv", VALUEFUNC(_wrap_CamRLEImage_encode_threshold_inv), -1);
  rb_define_method(cCamRLEImage.klass, "encode_color", VALUEFUNC(_wrap_CamRLEImage_encode_color), -1);
  rb_define_method(cCamRLEImage.klass, "labeling!", VALUEFUNC(_wrap_CamRLEImage_labelingN___), -1);
  rb_define_alias(cCamRLEImage.klass, "labelling!", "labeling!");
  rb_define_method(cCamRLEImage.klass, "blob_analysis", VALUEFUNC(_wrap_CamRLEImage_blob_analysis), -1);
  rb_define_method(cCamRLEImage.klass, "apply_lut!", VALUEFUNC(_wrap_CamRLEImage_apply_lutN___), -1);
  rb_define_method(cCamRLEImage.klass, "apply_lut", VALUEFUNC(_wrap_CamRLEImage_apply_lut), -1);
  rb_define_method(cCamRLEImage.klass, "decode", VALUEFUNC(_wrap_CamRLEImage_decode), -1);
  rb_define_method(cCamRLEImage.klass, "decode_blobs", VALUEFUNC(_wrap_CamRLEImage_decode_blobs), -1);
  rb_define_method(cCamRLEImage.klass, "inverse!", VALUEFUNC(_wrap_CamRLEImage_inverseN___), -1);
  rb_define_method(cCamRLEImage.klass, "erode_cross", VALUEFUNC(_wrap_CamRLEImage_erode_cross), -1);
  rb_define_method(cCamRLEImage.klass, "erode_3x3", VALUEFUNC(_wrap_CamRLEImage_erode_3x3), -1);
  rb_define_method(cCamRLEImage.klass, "erode_3x2", VALUEFUNC(_wrap_CamRLEImage_erode_3x2), -1);
  cCamRLEImage.mark = 0;
  cCamRLEImage.destroy = (void (*)(void *)) free_CamRLEImage;
  cCamRLEImage.trackObjects = 1;
  
  cCamBlobInfo.klass = rb_define_class_under(mCamellia, "CamBlobInfo", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamBlobInfo, (void *) &cCamBlobInfo);
  rb_define_alloc_func(cCamBlobInfo.klass, _wrap_CamBlobInfo_allocate);
  rb_define_method(cCamBlobInfo.klass, "initialize", VALUEFUNC(_wrap_new_CamBlobInfo), -1);
  rb_define_method(cCamBlobInfo.klass, "id", VALUEFUNC(_wrap_CamBlobInfo_id_get), -1);
  rb_define_method(cCamBlobInfo.klass, "left", VALUEFUNC(_wrap_CamBlobInfo_left_get), -1);
  rb_define_method(cCamBlobInfo.klass, "top", VALUEFUNC(_wrap_CamBlobInfo_top_get), -1);
  rb_define_method(cCamBlobInfo.klass, "width", VALUEFUNC(_wrap_CamBlobInfo_width_get), -1);
  rb_define_method(cCamBlobInfo.klass, "height", VALUEFUNC(_wrap_CamBlobInfo_height_get), -1);
  rb_define_method(cCamBlobInfo.klass, "surface", VALUEFUNC(_wrap_CamBlobInfo_surface_get), -1);
  rb_define_method(cCamBlobInfo.klass, "cx", VALUEFUNC(_wrap_CamBlobInfo_cx_get), -1);
  rb_define_method(cCamBlobInfo.klass, "cy", VALUEFUNC(_wrap_CamBlobInfo_cy_get), -1);
  rb_define_method(cCamBlobInfo.klass, "value", VALUEFUNC(_wrap_CamBlobInfo_value_get), -1);
  rb_define_method(cCamBlobInfo.klass, "min", VALUEFUNC(_wrap_CamBlobInfo_min_get), -1);
  rb_define_method(cCamBlobInfo.klass, "max", VALUEFUNC(_wrap_CamBlobInfo_max_get), -1);
  rb_define_method(cCamBlobInfo.klass, "misc", VALUEFUNC(_wrap_CamBlobInfo_misc_get), -1);
  cCamBlobInfo.mark = 0;
  cCamBlobInfo.destroy = (void (*)(void *)) free_CamBlobInfo;
  cCamBlobInfo.trackObjects = 1;
  
  cCamBlobs.klass = rb_define_class_under(mCamellia, "CamBlobs", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamBlobs, (void *) &cCamBlobs);
  rb_include_module(cCamBlobs.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(cCamBlobs.klass, _wrap_CamBlobs_allocate);
  rb_define_method(cCamBlobs.klass, "initialize", VALUEFUNC(_wrap_new_CamBlobs), -1);
  rb_define_method(cCamBlobs.klass, "nb_blobs", VALUEFUNC(_wrap_CamBlobs_nb_blobs_get), -1);
  rb_define_method(cCamBlobs.klass, "[]", VALUEFUNC(_wrap_CamBlobs___getitem__), -1);
  rb_define_method(cCamBlobs.klass, "each", VALUEFUNC(_wrap_CamBlobs_each), -1);
  cCamBlobs.mark = 0;
  cCamBlobs.destroy = (void (*)(void *)) free_CamBlobs;
  cCamBlobs.trackObjects = 1;
  
  cCamTableOfBasins.klass = rb_define_class_under(mCamellia, "CamTableOfBasins", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CamTableOfBasins, (void *) &cCamTableOfBasins);
  rb_include_module(cCamTableOfBasins.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(cCamTableOfBasins.klass, _wrap_CamTableOfBasins_allocate);
  rb_define_method(cCamTableOfBasins.klass, "initialize", VALUEFUNC(_wrap_new_CamTableOfBasins), -1);
  rb_define_method(cCamTableOfBasins.klass, "nbBasins", VALUEFUNC(_wrap_CamTableOfBasins_nbBasins_get), -1);
  rb_define_method(cCamTableOfBasins.klass, "get_rid_of", VALUEFUNC(_wrap_CamTableOfBasins_get_rid_of), -1);
  rb_define_method(cCamTableOfBasins.klass, "[]", VALUEFUNC(_wrap_CamTableOfBasins___getitem__), -1);
  rb_define_method(cCamTableOfBasins.klass, "each", VALUEFUNC(_wrap_CamTableOfBasins_each), -1);
  cCamTableOfBasins.mark = 0;
  cCamTableOfBasins.destroy = (void (*)(void *)) free_CamTableOfBasins;
  cCamTableOfBasins.trackObjects = 1;
  
  camSetErrorFunct(camErrorRuby);
  rb_define_method(cCamImage.klass, "set_image_data", VALUEFUNC(camellia_set_image_data), 1);
  
}

